===========================
使用 Django 输出 PDF
===========================

这篇文档阐述了如何通过使用 Django 视图动态输出 PDF。这可以通过一个出色的、开源的 Python PDF 库 ReportLab_ 来实现。

动态生成 PDF 文件的优点是，你可以为不同目的创建自定义的 PDF —— 这就是说，为不同的用户或者不同的内容。

例如，Django 在 kusports.com_ 上用来为那些参加 March Madness 比赛的人，生成自定义的，便于打印的 NCAA 锦标赛晋级表作为 PDF 文件。

.. _ReportLab: http://www.reportlab.com/opensource/
.. _kusports.com: http://www.kusports.com/

安装 ReportLab
=================

ReportLab 库在 `PyPI`_ 上提供。也可以下载到 `user guide`_ （PDF 文件，不是巧合）。你可以使用 ``pip`` 来安装 ReportLab：

.. code-block:: console

    $ pip install reportlab

通过在 Python 交互解释器中导入它来测试你的安装::

    >>> import reportlab

如果没有抛出任何错误，则已安装成功。

.. _PyPI: https://pypi.python.org/pypi/reportlab
.. _user guide: http://www.reportlab.com/docs/reportlab-userguide.pdf

编写你的视图
===============

使用 Django 动态生成 PDF 的关键是，ReportLab API 作用于类似于文件的对象，并且 Django 的 :class:`~django.http.HttpResponse` 对象就是类似于文件的对象。

这里是一个“Hello World”的例子::

    from reportlab.pdfgen import canvas
    from django.http import HttpResponse

    def some_view(request):
        # Create the HttpResponse object with the appropriate PDF headers.
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="somefilename.pdf"'

        # Create the PDF object, using the response object as its "file."
        p = canvas.Canvas(response)

        # Draw things on the PDF. Here's where the PDF generation happens.
        # See the ReportLab documentation for the full list of functionality.
        p.drawString(100, 100, "Hello world.")

        # Close the PDF object cleanly, and we're done.
        p.showPage()
        p.save()
        return response

代码和注释是不用多说的，但是一些事情需要提醒一下：

* 响应对象获得了一个特殊的 MIME 类型，:mimetype:`application/pdf`。这会告诉浏览器，文档是个 PDF 文件而不是 HTML 文件。如果你把它去掉，浏览器可能会把输出解释为 HTML，会在浏览器窗口中显示一篇丑陋的、可怕的天书。

* 响应对象获取了附加的 ``Content-Disposition`` 协议头，它含有 PDF 文件的名称。文件名可以是任意的；你想把它叫做什么都可以。浏览器会在“另存为...”对话框等地方使用它。

* 在这个例子中，``Content-Disposition`` 协议头以 ``'attachment; '`` 开头。 这样就强制让浏览器弹出对话框来提示或者确认，如果机器上设置了默认值要如何处理文档。如果你去掉了 ``'attachment;'``，无论什么程序或控件被设置为用于处理 PDF，浏览器都会使用它。代码就像这样::

      response['Content-Disposition'] = 'filename="somefilename.pdf"'

* 和 ReportLab API 挂钩非常简单：只需要向 ``canvas.Canvas`` 传递 ``response`` 作为第一个参数。``Canvas`` 函数接受一个类似于文件的对象，而 :class:`~django.http.HttpResponse` 对象正好合适。

* 注意所有随后的 PDF 生成方法都在 PDF 对象（这个例子是 ``p``）上调用，而不是 ``response`` 对象上。

* 最后，在 PDF 文件上调用 ``showPage()`` 和 ``save()`` 非常重要。

.. note::

    ReportLab 并不是线程安全的。一些用户报告了一些奇怪的问题，在构建生成 PDF 的 Django 视图时出现，这些视图在同一时间被很多人访问。

复杂的 PDF
============

如果你使用 ReportLab 创建复杂的 PDF 文档，考虑使用 :mod:`io` 库作为你 PDF 文件的临时保存地点。这个库提供了一个类似于文件的对象接口，非常实用。这个是上面的“Hello World”示例采用 :mod:`io` 重写后的样子::

    from io import BytesIO
    from reportlab.pdfgen import canvas
    from django.http import HttpResponse

    def some_view(request):
        # Create the HttpResponse object with the appropriate PDF headers.
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="somefilename.pdf"'

        buffer = BytesIO()

        # Create the PDF object, using the BytesIO object as its "file."
        p = canvas.Canvas(buffer)

        # Draw things on the PDF. Here's where the PDF generation happens.
        # See the ReportLab documentation for the full list of functionality.
        p.drawString(100, 100, "Hello world.")

        # Close the PDF object cleanly.
        p.showPage()
        p.save()

        # Get the value of the BytesIO buffer and write it to the response.
        pdf = buffer.getvalue()
        buffer.close()
        response.write(pdf)
        return response

其它格式
=============

要注意在这些例子中并没有很多 PDF 特定的东西 —— 只是使用了 ``reportlab``。你可以使用相似的技巧来生成任何格式，只要你可以找到对应的 Python 库。关于用于生成基于文本的格式的其它例子和技巧，另见 :doc:`/howto/outputting-csv`。

.. seealso::

    Django Packages 提供了帮助从 Django 生成 PDF 文件的 `软件包的比较 <https://djangopackages.org/grids/g/pdf/>`_。
