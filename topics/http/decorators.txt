===============
视图装饰器
===============

.. module:: django.views.decorators.http

Django 为视图提供了数个装饰器，用以支持相关的 HTTP 服务。

允许的 HTTP 方法
====================

:mod:`django.views.decorators.http` 包里的装饰器可以基于请求的方法来限制对视图的访问。若条件不满足会返回 :class:`django.http.HttpResponseNotAllowed`。

.. function:: require_http_methods(request_method_list)

    装饰器限制视图只能接受特定的请求方法。用法::

        from django.views.decorators.http import require_http_methods

        @require_http_methods(["GET", "POST"])
        def my_view(request):
            # I can assume now that only GET or POST requests make it this far
            # ...
            pass

    注意，方法名必须大写。

.. function:: require_GET()

    只允许视图接受 GET 方法的装饰器。

.. function:: require_POST()

    只允许视图接受 POST 方法的装饰器。

.. function:: require_safe()

    只允许视图接受 GET 和 HEAD 方法的装饰器。 这些方法通常被认为是“安全”的，因为方法不该有请求资源以外的目的。

    .. note::
        Django 会自动清除对 HEAD 请求的响应中的内容而只保留头部，所以在你的视图中你处理 HEAD 请求的方式可以完全与 GET 请求一致。因为某些软件，例如链接检查器，依赖于 HEAD 请求，所以你可能应该使用 ``require_safe`` 而不是 ``require_GET``。

可控制的视图处理
===========================

:mod:`django.views.decorators.http` 中的以下装饰器可以用来控制特定视图的缓存行为。

.. function:: condition(etag_func=None, last_modified_func=None)

.. function:: etag(etag_func)

.. function:: last_modified(last_modified_func)

    这些装饰器可以用于生成 ``ETag`` 和 ``Last-Modified`` 头部；参考 :doc:`条件视图处理 </topics/conditional-view-processing>`.

.. module:: django.views.decorators.gzip

GZip 压缩
================

:mod:`django.views.decorators.gzip` 里的装饰器基于每个视图控制其内容压缩。

.. function:: gzip_page()

    如果浏览器允许 GZip 压缩，这个装饰器将对内容进行压缩。它设置相应的 ``Vary`` 头部，以使得缓存根据 ``Accept-Encoding`` 头来存储信息。

.. module:: django.views.decorators.vary

Vary 头部
============

:mod:`django.views.decorators.vary` 里的装饰器可以用来基于特定的请求头部来控制缓存。

.. function:: vary_on_cookie(func)

.. function:: vary_on_headers(*headers)

    到当构建缓存的键时，``Vary`` 头部定义一个缓存机制应该考虑的请求头。

    参见 :ref:`使用 Vary 头部 <using-vary-headers>`。

.. module:: django.views.decorators.cache

缓存
=======

:mod:`django.views.decorators.cache` 里的装饰器控制服务器和客户端的缓存。

.. function:: cache_control(**kwargs)

    该装饰器为响应的 ``Cache-Control`` 头添加所有关键字参数到里面。参见 :func:`~django.utils.cache.patch_cache_control` 查看变换的详细信息。

.. function:: never_cache(view_func)

    该装饰器添加一个 ``Cache-Control: max-age=0, no-cache, no-store,
    must-revalidate`` 头到响应以声明该页面不应该被缓存。

    .. versionchanged:: 1.9

        在 Django 1.9 之前，发送 ``Cache-Control: max-age=0``，但这并没有可靠地防止所有的浏览器缓存。
