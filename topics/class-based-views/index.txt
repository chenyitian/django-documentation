=================
基于类的视图
=================

视图是一个可调用对象，它接收一个请求然后返回一个响应。这个可调用对象可以不只是函数，Django 提供一些可以用作视图的类。它们允许你结构化你的视图并且利用继承和混合重用代码。后面我们将介绍一些用于简单任务的通用视图，但你可能想要设计自己的可重用视图的结构以适合你的使用场景。完整的细节，请参见 :doc:`基于类的视图的参考文档 documentation</ref/class-based-views/index>`。

.. toctree::
   :maxdepth: 1

   intro
   generic-display
   generic-editing
   mixins

基本的示例
==============

Django 提供基本的视图类，它们适用于广泛的应用。所有的视图类继承自 :class:`~django.views.generic.base.View` 类，它负责连接视图到 URL、HTTP 方法调度和其它简单的功能。:class:`~django.views.generic.base.RedirectView` 用于简单的 HTTP 重定向，:class:`~django.views.generic.base.TemplateView` 扩展基类来渲染模板。


在 URLconf 中的简单用法
============================

使用通用视图最简单的方法是在 URLconf 中创建它们。如果你只是修改基于类的视图的一些简单属性，你可以将它们直接传递给 :meth:`~django.views.generic.base.View.as_view` 方法调用::

    from django.conf.urls import url
    from django.views.generic import TemplateView

    urlpatterns = [
        url(r'^about/$', TemplateView.as_view(template_name="about.html")),
    ]

传递给 :meth:`~django.views.generic.base.View.as_view` 的参数将覆盖类中的属性。在这个例子中，我们设置 ``TemplateView`` 的 ``template_name``。可以使用类似的方法覆盖 :class:`~django.views.generic.base.RedirectView` 的 ``url`` 属性。


子类化通用视图
=========================

第二种，功能更强一点的使用通用视图的方式是继承一个已经存在的视图并在子类中覆盖其属性（例如 ``template_name``）或方法（例如 ``get_context_data``）以提供新的值或方法。例如，考虑只显示一个模板 ``about.html`` 的视图。Django 有一个通用视图来做这件事 —— :class:`~django.views.generic.base.TemplateView` —— 所以我们可以简单地子类化它，并覆盖模板的名称::

    # some_app/views.py
    from django.views.generic import TemplateView

    class AboutView(TemplateView):
        template_name = "about.html"

然后我们只需要添加这个新的视图到我们的 URLconf 中。:class:`~django.views.generic.base.TemplateView` 是一个类不是一个函数，所以我们将URL 指向类的 :meth:`~django.views.generic.base.View.as_view` 方法，它让基于类的视图提供一个类似函数的入口::

    # urls.py
    from django.conf.urls import url
    from some_app.views import AboutView

    urlpatterns = [
        url(r'^about/$', AboutView.as_view()),
    ]


关于如何使用内建的通用视图的更多信息，参考下一主题 :doc:`通用的基于类的视图 </topics/class-based-views/generic-display>`。

.. _supporting-other-http-methods:

支持其它 HTTP 方法
-----------------------------

假设有人想通过 HTTP 访问我们的书库，它使用视图作为 API。这个 API 客户端将随时连接并下载自上次访问以来新出版的书籍的数据。如果没有新的书籍，仍然从数据库中获取书籍、渲染一个完整的响应并发送给客户端将是对 CPU 和带宽的浪费。如果有个 API 用于查询书籍最新发布的时间将会更好。

我们在 URLconf 中映射 URL 到书籍列表视图::

    from django.conf.urls import url
    from books.views import BookListView

    urlpatterns = [
        url(r'^books/$', BookListView.as_view()),
    ]

下面是这个视图::

    from django.http import HttpResponse
    from django.views.generic import ListView
    from books.models import Book

    class BookListView(ListView):
        model = Book

        def head(self, *args, **kwargs):
            last_book = self.get_queryset().latest('publication_date')
            response = HttpResponse('')
            # RFC 1123 date format
            response['Last-Modified'] = last_book.publication_date.strftime('%a, %d %b %Y %H:%M:%S GMT')
            return response

如果该视图从 ``GET`` 请求访问，将在响应中返回一个普通而简单的对象列表（使用 ``book_list.html`` 模板）。但如果客户端发出一个 ``HEAD`` 请求，响应将具有一个空的响应体而 ``Last-Modified`` 头部会指示最新发布的书籍的时间。基于这个信息，客户端可以下载或不下载完整的对象列表。
