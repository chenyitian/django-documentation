==============
执行查询
==============

.. currentmodule:: django.db.models

一旦你建立好 :doc:`数据模型 </topics/db/models>` 之后，Django 会自动生成一套数据库抽象的 API，可以让你创建、检索、更新和删除对象。这篇文档阐述了如何使用这些 API。关于模型查询所有选项的完整细节，请见 :doc:`数据模型参考 </ref/models/index>`。

在整个文档（以及参考）中，我们将引用下面的模型，它构成一个博客应用：

.. _queryset-model-example:

.. code-block:: python

    from django.db import models

    class Blog(models.Model):
        name = models.CharField(max_length=100)
        tagline = models.TextField()

        def __str__(self):              # __unicode__ on Python 2
            return self.name

    class Author(models.Model):
        name = models.CharField(max_length=200)
        email = models.EmailField()

        def __str__(self):              # __unicode__ on Python 2
            return self.name

    class Entry(models.Model):
        blog = models.ForeignKey(Blog)
        headline = models.CharField(max_length=255)
        body_text = models.TextField()
        pub_date = models.DateField()
        mod_date = models.DateField()
        authors = models.ManyToManyField(Author)
        n_comments = models.IntegerField()
        n_pingbacks = models.IntegerField()
        rating = models.IntegerField()

        def __str__(self):              # __unicode__ on Python 2
            return self.headline

创建对象
================

Django 使用一种直观的方式把数据库表中的数据表示成 Python 对象：一个模型类代表数据库中的一个表，一个模型类的实例代表这个数据库表中的一条特定的记录。

使用关键词参数实例化一个对象来创建它，然后调用 :meth:`~django.db.models.Model.save` 把它保存到数据库中。

假设模型存放于文件 ``mysite/blog/models.py`` 中，下面是一个例子::

    >>> from blog.models import Blog
    >>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
    >>> b.save()

上面的代码在背后执行了 SQL 的 ``INSERT`` 操作。在你显式调用 :meth:`~django.db.models.Model.save` 之前，Django 不会访问数据库。

:meth:`~django.db.models.Model.save` 方法没有返回值。

.. seealso::

    :meth:`~django.db.models.Model.save` 方法带有一些高级选项，它们没有在这里给出，完整的细节请见 :meth:`~django.db.models.Model.save` 文档。

    如果你想只用一条语句创建并保存一个对象，使用 :meth:`~django.db.models.query.QuerySet.create()` 方法。

保存对象的改动
=========================

要保存对数据库中已存在的对象的改动，请使用 :meth:`~django.db.models.Model.save`。

假设 ``Blog`` 的一个实例 ``b5`` 已经被保存在数据库中，下面这个例子将更改它的名字，并且更新数据库中的记录::

    >>> b5.name = 'New name'
    >>> b5.save()

上面的代码在背后执行了 SQL 的 ``UPDATE`` 语句。在你显式调用 :meth:`~django.db.models.Model.save` 之前，Django 不会访问数据库。

保存 ``ForeignKey`` 和 ``ManyToManyField`` 字段
----------------------------------------------------

更新 :class:`~django.db.models.ForeignKey` 字段的方式和保存普通字段相同 —— 只要把一个正确类型的对象赋值给该字段。下面的例子更新了 ``Entry`` 类的实例 ``entry`` 的 ``blog`` 属性，假设 ``Entry`` 和 ``Blog`` 分别已经有一个正确的实例保存在数据库中（所以我们可以像下面这样获取它们）::

    >>> from blog.models import Entry
    >>> entry = Entry.objects.get(pk=1)
    >>> cheese_blog = Blog.objects.get(name="Cheddar Talk")
    >>> entry.blog = cheese_blog
    >>> entry.save()

更新 :class:`~django.db.models.ManyToManyField` 的方式有一些不同 —— 需要使用字段的 :meth:`~django.db.models.fields.related.RelatedManager.add` 方法来增加关联关系的一条记录。下面这个例子向 ``entry`` 对象添加 ``Author`` 类的实例 ``joe``::

    >>> from blog.models import Author
    >>> joe = Author.objects.create(name="Joe")
    >>> entry.authors.add(joe)

为了在一条语句中，向 :class:`~django.db.models.ManyToManyField` 添加多条记录，可以在调用 :meth:`~django.db.models.fields.related.RelatedManager.add` 方法时传入多个参数，像这样::

    >>> john = Author.objects.create(name="John")
    >>> paul = Author.objects.create(name="Paul")
    >>> george = Author.objects.create(name="George")
    >>> ringo = Author.objects.create(name="Ringo")
    >>> entry.authors.add(john, paul, george, ringo)

Django 将会在你赋值或添加错误类型的对象时报错。

.. _retrieving-objects:

获取对象
==================

通过模型中的 :class:`~django.db.models.Manager` 构造一个 :class:`~django.db.models.query.QuerySet`，来从你的数据库中获取对象。

:class:`~django.db.models.query.QuerySet` 表示从数据库中取出来的对象的集合。它可以含有零个、一个或者多个 *过滤器*，过滤器基于所给的参数限制查询的结果。在 SQL 的角度，:class:`~django.db.models.query.QuerySet` 和 ``SELECT`` 语句等价，过滤器是像 ``WHERE`` 和 ``LIMIT`` 一样的限制子句。

你可以从模型的 :class:`~django.db.models.Manager` 那里取得 :class:`~django.db.models.query.QuerySet`。每个模型都至少有一个 :class:`~django.db.models.Manager`，它默认命名为 :attr:`~django.db.models.Model.objects`。通过模型类来直接访问它，像这样::

    >>> Blog.objects
    <django.db.models.manager.Manager object at ...>
    >>> b = Blog(name='Foo', tagline='Bar')
    >>> b.objects
    Traceback:
        ...
    AttributeError: "Manager isn't accessible via Blog instances."

.. note::

    ``Managers`` 只可以通过模型的类访问，而不可以通过模型的实例访问，目的是为了强制区分表级别（"table-level"）的操作和记录级别（"record-level"）的操作。

对于一个模型来说，:class:`~django.db.models.Manager` 是 ``QuerySets`` 的主要来源。例如，``Blog.objects.all()`` 会返回持有数据库中所有 ``Blog`` 对象的一个 :class:`~django.db.models.query.QuerySet`。

获取所有对象
----------------------

获取一个表中所有对象的最简单的方式是全部获取。可以使用 :class:`~django.db.models.Manager` 的 :meth:`~django.db.models.query.QuerySet.all` 方法::

    >>> all_entries = Entry.objects.all()

:meth:`~django.db.models.query.QuerySet.all` 方法返回包含数据库中所有对象的一个 :class:`~django.db.models.query.QuerySet`。

使用过滤器获取特定对象
----------------------------------------

:meth:`~django.db.models.query.QuerySet.all` 方法返回了一个包含数据库表中所有记录 :class:`~django.db.models.query.QuerySet`。但在通常情况下，你往往想要获取的是完整数据集的一个子集。

要创建这样一个子集，需要精炼开始的 :class:`~django.db.models.query.QuerySet`，增加一些过滤器条件。两个最普遍的精炼 :class:`~django.db.models.query.QuerySet` 的途径是：

``filter(**kwargs)``
    返回一个新的包含满足参数中所给条件对象的 :class:`~django.db.models.query.QuerySet`。

``exclude(**kwargs)``
    返回一个新的包含 *不* 满足参数中所给条件对象的 :class:`~django.db.models.query.QuerySet`。

查询参数（上面函数定义中的 ``**kwargs``）需要满足特定的格式，下面 `字段查找`_ 一节中会提到。

举个例子，要获取年份为 2006 的所有文章的 :class:`~django.db.models.query.QuerySet`，可以这样使用 :meth:`~django.db.models.query.QuerySet.filter` 方法::

    Entry.objects.filter(pub_date__year=2006)

在默认的管理器类中，它相当于::

    Entry.objects.all().filter(pub_date__year=2006)

.. _chaining-filters:

链式过滤
~~~~~~~~~~~~~~~~

:class:`~django.db.models.query.QuerySet` 的精炼结果还是 :class:`~django.db.models.query.QuerySet`，所以你可以把精炼语句链接在一起。像这样::

    >>> Entry.objects.filter(
    ...     headline__startswith='What'
    ... ).exclude(
    ...     pub_date__gte=datetime.date.today()
    ... ).filter(
    ...     pub_date__gte=datetime(2005, 1, 30)
    ... )

这个例子最开始获取数据库中所有对象的一个 :class:`~django.db.models.query.QuerySet` 之后增加一个过滤器，然后又增加一个排除，再之后又是另外一个过滤器。最后的结果仍然是一个 :class:`~django.db.models.query.QuerySet`，它包含所有标题以“What”开头的记录，发布日期在 2005 年 1 月 30 日至当天之间的所有记录。

.. _filtered-querysets-are-unique:

过滤后的 ``QuerySet`` 是独立的
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

每次你筛选一个 :class:`~django.db.models.query.QuerySet`，得到的都是全新的另一个 :class:`~django.db.models.query.QuerySet`，它和之前的 :class:`~django.db.models.query.QuerySet` 之间没有任何绑定关系。每次筛选都会创建一个独立的 :class:`~django.db.models.query.QuerySet`，它可以被存储及反复使用。

例如::

    >>> q1 = Entry.objects.filter(headline__startswith="What")
    >>> q2 = q1.exclude(pub_date__gte=datetime.date.today())
    >>> q3 = q1.filter(pub_date__gte=datetime.date.today())

这三个 ``QuerySets`` 都是独立的。第一个是一个基础的 :class:`~django.db.models.query.QuerySet`，包含所有标题以“What”开头的记录。第二个查询集是第一个的子集，它增加另外一个限制条件，排除 ``pub_date`` 为今天和将来的记录。第三个查询集同样是第一个的子集，它增加另外一个限制条件，只选择 ``pub_date`` 为今天或将来的记录。最初的 :class:`~django.db.models.query.QuerySet` (``q1``) 不会受到筛选过程的影响。

.. _querysets-are-lazy:

``QuerySet`` 惰性执行的
~~~~~~~~~~~~~~~~~~~~~~~

``QuerySets`` 惰性执行的 —— 创建 :class:`~django.db.models.query.QuerySet` 不会带来任何数据库的访问。你可以将过滤器保持一整天，直到 :class:`~django.db.models.query.QuerySet` 需要 *求值* 时，Django 才会真正运行这个查询。看下这个例子::

    >>> q = Entry.objects.filter(headline__startswith="What")
    >>> q = q.filter(pub_date__lte=datetime.date.today())
    >>> q = q.exclude(body_text__icontains="food")
    >>> print(q)

虽然它看上去有三次数据库访问，但事实上只有在最后一行（``print(q)``）时才访问一次数据库。一般来说，只有在“请求” :class:`~django.db.models.query.QuerySet` 的结果时才会到数据库中去获取它们。当你确实需要结果时，:class:`~django.db.models.query.QuerySet` 通过访问数据库来 *求值*。关于求值发生的准确时间，参见 :ref:`when-querysets-are-evaluated`。

.. _retrieving-single-object-with-get:

通过 ``get()`` 获取一个单一的对象
-----------------------------------------

:meth:`~django.db.models.query.QuerySet.filter` 始终给你一个 :class:`~django.db.models.query.QuerySet`，即使只有一个对象满足查询条件 —— 这种情况下，:class:`~django.db.models.query.QuerySet` 将只包含一个元素。

如果你知道只有一个对象满足你的查询，你可以使用 :class:`~django.db.models.Manager` 的 :meth:`~django.db.models.query.QuerySet.get` 方法，它直接返回该对象::

    >>> one_entry = Entry.objects.get(pk=1)

你可以对 :meth:`~django.db.models.query.QuerySet.get` 使用任何查询表达式，和 :meth:`~django.db.models.query.QuerySet.filter` 一样 —— 同样请查看下文的 `字段查找`_。

注意，使用 :meth:`~django.db.models.query.QuerySet.get` 和使用 :meth:`~django.db.models.query.QuerySet.filter` 的切片 ``[0]`` 有一点区别。如果没有结果满足查询，:meth:`~django.db.models.query.QuerySet.get` 将引发一个 ``DoesNotExist`` 异常。这个异常是正在查询的模型类的一个属性 —— 所以在上面的代码中，如果没有主键为 1 的 ``Entry`` 对象，Django 将引发一个 ``Entry.DoesNotExist``。

类似地，如果有多条记录满足 :meth:`~django.db.models.query.QuerySet.get` 的查询条件，Django 也将报错。这种情况将引发 :exc:`~django.core.exceptions.MultipleObjectsReturned`，它同样是模型类自身的一个属性。


其他 ``QuerySet`` 方法
--------------------------

大多数情况下，需要从数据库中查找对象时，你会使用 :meth:`~django.db.models.query.QuerySet.all`、:meth:`~django.db.models.query.QuerySet.get`、:meth:`~django.db.models.query.QuerySet.filter` 和 :meth:`~django.db.models.query.QuerySet.exclude`。然而，这只是冰山一角；:class:`~django.db.models.query.QuerySet` 方法的完整列表，请参见 :ref:`QuerySet API 参考 <queryset-api>`。

.. _limiting-querysets:

限制 ``QuerySet``
---------------------------

可以使用 Python 的切片语法来限制 :class:`~django.db.models.query.QuerySet` 记录的数目。它等同于 SQL 的 ``LIMIT`` 和 ``OFFSET`` 子句。

例如，下面的语句返回前面 5 个对象（``LIMIT 5``）::

    >>> Entry.objects.all()[:5]

下面这条语句返回第 6 至第 10 个对象（``OFFSET 5 LIMIT 5``）::

    >>> Entry.objects.all()[5:10]

不支持负的索引（例如 ``Entry.objects.all()[-1]``）。

通常，:class:`~django.db.models.query.QuerySet` 的切片返回一个新的 :class:`~django.db.models.query.QuerySet` —— 它不会执行查询。有一个例外，是如果你使用 Python 切片语法中“step”参数。例如，下面的语句将返回前 10 个对象中每隔 2 个对象，它将真实执行查询::

    >>> Entry.objects.all()[:10:2]

若要获取一个单一的对象而不是一个列表（例如，``SELECT foo FROM bar LIMIT 1``），可以简单地使用一个索引而不是切片。例如，下面的语句返回数据库中根据标题排序后的第一条 ``Entry``::

    >>> Entry.objects.order_by('headline')[0]

它大体等同于::

    >>> Entry.objects.order_by('headline')[0:1].get()

然而请注意，如果没有对象满足给定的条件，第一条语句将抛出 ``IndexError``，而第二条语句将抛出 ``DoesNotExist``。 更多细节参见 :meth:`~django.db.models.query.QuerySet.get`。

.. _field-lookups-intro:

字段查找
-------------

字段查询是指如何指定 SQL ``WHERE`` 子句的内容。它们通过 :class:`~django.db.models.query.QuerySet` 方法 :meth:`~django.db.models.query.QuerySet.filter`、:meth:`~django.db.models.query.QuerySet.exclude` 和 :meth:`~django.db.models.query.QuerySet.get` 的关键字参数指定。

查询的关键字参数的基本形式是 ``field__lookuptype=value``。（中间是两个下划线）。例如::

    >>> Entry.objects.filter(pub_date__lte='2006-01-01')

翻译成 SQL（大体）是：

.. code-block:: sql

    SELECT * FROM blog_entry WHERE pub_date <= '2006-01-01';

.. admonition:: 这是如何实现的

   Python 定义的函数可以接收任意的键/值对参数，这些名称和参数可以在运行时求值。更多信息，参见 Python 官方文档中的 :ref:`tut-keywordargs`。

查询条件中指定的字段必须是模型字段的名称。但有一个例外，对于 :class:`~django.db.models.ForeignKey` 你可以使用字段名加上 ``_id`` 后缀。在这种情况下，该参数的值应该是外键的原始值。例如：

    >>> Entry.objects.filter(blog_id=4)

如果你传递的是一个不合法的参数，查询函数将抛出 ``TypeError``。

这些数据库 API 支持大约二十多种查询的类型；在 :ref:`字段查找参考 <field-lookups>` 中可以找到完整的参考。为了让你尝尝鲜，下面是一些你可能用到的常见查询：

:lookup:`exact`
    “精确”匹配。例如::

        >>> Entry.objects.get(headline__exact="Cat bites dog")

    将生成下面的 SQL：

    .. code-block:: sql

        SELECT ... WHERE headline = 'Cat bites dog';

    如果你没有提供查询类型 —— 即如果你的关键字参数不包含双下划线 —— 默认假定查询类型是 ``exact``。

    例如，下面的两条语句相等::

        >>> Blog.objects.get(id__exact=14)  # Explicit form
        >>> Blog.objects.get(id=14)         # __exact is implied

    这是为了方便，因为 ``exact`` 查询是最常见的情况。

:lookup:`iexact`
    大小写不敏感的匹配。所以，查询::

        >>> Blog.objects.get(name__iexact="beatles blog")

    将匹配标题为 ``"Beatles Blog"``、``"beatles blog"`` 甚至 ``"BeAtlES blOG"`` 的 ``Blog``。

:lookup:`contains`
    大小写敏感的包含关系测试。例如::

        Entry.objects.get(headline__contains='Lennon')

    大体可以翻译成下面的 SQL：

    .. code-block:: sql

        SELECT ... WHERE headline LIKE '%Lennon%';

    注意，这将匹配 ``'Today Lennon honored'`` 但不能匹配 ``'today lennon honored'``。

    还有一个大小写不敏感的版本，:lookup:`icontains`。

:lookup:`startswith`, :lookup:`endswith`
    分别表示以 XXX 开头和以 XXX 结尾。当然还有大小写不敏感的版本，叫做 :lookup:`istartswith` 和 :lookup:`iendswith`。

同样，这里只是表面。完整的参考可以在 :ref:`字段查找参考 <field-lookups>` 中找到。

.. _lookups-that-span-relationships:

跨关联关系的查询
-------------------------------

Django 提供一种强大而又直观的方式来“处理”查询中的关联关系，它在后台自动帮你处理 SQL ``JOIN`` 。若要跨越关联关系，只需使用关联的模型字段的名称，并使用双下划线分隔，直至你想要的字段。

下面这个例子获取所有 ``Blog`` 的 ``name`` 为 ``'Beatles Blog'`` 的 ``Entry`` 对象::

    >>> Entry.objects.filter(blog__name='Beatles Blog')

这种跨越可以是任意的深度。

它还可以反向工作。若要引用一个“反向”的关系，只需要使用该模型的小写的名称。

下面的示例获取至少关联一个 ``Entry`` 且 ``headline`` 包含 ``'Lennon'`` 的所有 ``Blog`` 对象::

    >>> Blog.objects.filter(entry__headline__contains='Lennon')

如果你在多个关联关系直接过滤而且其中某个中介模型没有满足过滤条件的值，Django 将把它当做一个空的（所有的值都为 ``NULL``）但是合法的对象。这意味着不会有异常抛出。例如，在下面的过滤器中::

    Blog.objects.filter(entry__authors__name='Lennon')

（如果有一个相关联的 ``Author`` 模型），如果条目中没有找到对应的 ``author``，那么它将当作其没有 ``name``，而不会因为没有 ``author`` 抛出异常。通常，这就是你想要的。唯一可能让你困惑的是当你使用 :lookup:`isnull` 的时候。因此::

    Blog.objects.filter(entry__authors__name__isnull=True)

返回的 ``author`` 的 ``name`` 为空的 ``Blog`` 对象，以及``entry`` 的 ``author`` 为空的对象。如果你不需要后者，你可以这样写::

    Blog.objects.filter(entry__authors__isnull=False, entry__authors__name__isnull=True)

跨越多值的关联关系
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

当你基于 :class:`~django.db.models.ManyToManyField` 或反向的 :class:`~django.db.models.ForeignKey` 来过滤一个对象时，有两种不同种类的过滤器。考虑 ``Blog``/``Entry`` 关联关系（``Blog`` 和 ``Entry`` 是一对多的关系）。我们可能想找出标题包含 *"Lennon"*  并且在 2008 年出版的条目。或者我们可能想查询标题为 *"Lennon"* 的 条目，因为实际上有和单个 ``Blog`` 关联的多个条目，所以这两个查询在某些场景下都是有可能并有意义的。

:class:`~django.db.models.ManyToManyField` 有类似的情况。例如，如果 ``Entry`` 有一个 :class:`~django.db.models.ManyToManyField` 叫做 ``tags``，，我们可能想找到标签叫做 *"music"* 和 *"bands"* 的条目，或者我们想找一个标签名为 *"music"* 且状态为 *"public"* 的条目。

对于这两种情况，Django 有种一致的方法来处理 :meth:`~django.db.models.query.QuerySet.filter` 调用。一个 :meth:`~django.db.models.query.QuerySet.filter` 调用中的所有参数会同时应用以过滤出满足所有要求的记录。接下来的 :meth:`~django.db.models.query.QuerySet.filter` 调用进一步限制对象集，但是对于多值关系，它们应用到与主模型关联的对象，而不是应用到前一个 :meth:`~django.db.models.query.QuerySet.filter` 调用选择出来的对象。

这些听起来可能有点混乱，所以希望展示一个例子使它变得更清晰。选择所有包含同时满足两个条件的条目的博客，这两个条件是标题包含 *"Lennon"* 和发表时间是 2008（同一个条目满足两个条件），我们的代码是::

    Blog.objects.filter(entry__headline__contains='Lennon', entry__pub_date__year=2008)

从所有的博客模型实例中选择满足以下条件的博客实例：博客的条目的标题属性值是 *"Lennon"*，**或者** 条目的发表时间是 2008（两个条件至少满足一个，也可以同时满足），我们的代码是::

    Blog.objects.filter(entry__headline__contains='Lennon').filter(entry__pub_date__year=2008)

假设这里有一个博客拥有一条包含 *"Lennon"* 的条目和一条来自2008 的条目,但是没有一条来自 2008 并且包含 *"Lennon"* 的条目。第一个查询不会返回任何博客，第二个查询将会返回一个博客。

在第二个例子中，第一个过滤器限定查询集中的博客与标题包含 *"Lennon"* 的条目关联。第二个过滤器又限定查询集中的博客，这些博客关联的条目的发表时间是 2008。第二个过滤器过滤出来的条目与第一个过滤器过滤出来的条目可能相同也可能不同。每个过滤语句过滤的是 ``Blog``，而不是 ``Entry``。

.. note::

    跨越多值关系的 :meth:`~django.db.models.query.QuerySet.filter` 查询的行为，与 :meth:`~django.db.models.query.QuerySet.exclude` 实现的不同。单个 :meth:`~django.db.models.query.QuerySet.exclude` 调用中的条件不必引用同一个记录。

    例如，下面的查询排除标题中包含 *"Lennon"* 的条目 *和* 在 2008 年发布的条目::

        Blog.objects.exclude(
            entry__headline__contains='Lennon',
            entry__pub_date__year=2008,
        )

    然而，这与使用 :meth:`~django.db.models.query.QuerySet.filter` 的行为不同，它不是排除同时满足两个条件的条目。为了实现这点，即选择的博客中不包含在 2008 年发布且标题中带有 *"Lennon"* 的条目，你需要编写两个查询::

        Blog.objects.exclude(
            entry__in=Entry.objects.filter(
                headline__contains='Lennon',
                pub_date__year=2008,
            ),
        )

.. _using-f-expressions-in-filters:

在过滤器中引用模型中的字段
-----------------------------------------

到目前为止给出的示例中，我们构造过将模型字段与常量进行比较的过滤器。但是，如果你想将模型的一个字段与同一个模型的另外一个字段进行比较该怎么办？

Django 提供 :class:`F 表达式 <django.db.models.F>` 来允许这样的比较。``F()`` 返回的实例用作查询内部对模型字段的引用。这些引用可以用于查询的过滤器中来比较相同模型实例上不同字段之间值的比较。

例如，为了查找回复数多于广播数的条目，我们将构造一个 ``F()`` 对象来引用广播数量，并在查询中使用该 ``F()`` 对象::

    >>> from django.db.models import F
    >>> Entry.objects.filter(n_comments__gt=F('n_pingbacks'))

Django 支持对 ``F()`` 对象使用加法、减法、乘法、除法、取模以及幂计算等算术操作，两个操作数可以都是常数和其它 ``F()`` 对象。为了查找评论数比广播数 *两倍* 还要多的条目，我们将查询修改为::

    >>> Entry.objects.filter(n_comments__gt=F('n_pingbacks') * 2)

为了查询阅读数小于评论数与广播数总和要小的条目，我们将这样查询::

    >>> Entry.objects.filter(rating__lt=F('n_comments') + F('n_pingbacks'))

你还可以在 ``F()`` 对象中使用双下划线标记来跨越关联关系。带有双下划线的 ``F()`` 对象将引入任何需要的 ``JOIN`` 操作以访问关联的对象。例如，如要获取作者的名字与博客名字相同的条目，我们可以这样查询::

    >>> Entry.objects.filter(authors__name=F('blog__name'))

对于 date 和 date/time 字段，你可以给它们加上或减去一个 :class:`~datetime.timedelta` 对象。下面的例子将返回发布超过 3 天后被修改的所有条目::

    >>> from datetime import timedelta
    >>> Entry.objects.filter(mod_date__gt=F('pub_date') + timedelta(days=3))

``F()`` 对象支持 ``.bitand()`` 和 ``.bitor()`` 两种位操作，例如::

    >>> F('somefield').bitand(16)

主键查询的简捷方式
--------------------------

为了方便，Django 提供一个 ``pk`` 查询快捷方式，它表示“primary key”的意思。

在 ``Blog`` 模型示例中，主键是 ``id`` 字段，所以下面三条语句是等同的::

    >>> Blog.objects.get(id__exact=14) # Explicit form
    >>> Blog.objects.get(id=14) # __exact is implied
    >>> Blog.objects.get(pk=14) # pk implies id__exact

``pk`` 的使用不仅限于 ``__exact`` 查询 —— 任何查询类型都可以与 ``pk`` 结合来完成一个模型上对主键的查询::

    # Get blogs entries with id 1, 4 and 7
    >>> Blog.objects.filter(pk__in=[1,4,7])

    # Get all blog entries with id > 14
    >>> Blog.objects.filter(pk__gt=14)

``pk`` 查询也可以跨关系，下面三个语句是等价的::

    >>> Entry.objects.filter(blog__id__exact=3) # Explicit form
    >>> Entry.objects.filter(blog__id=3)        # __exact is implied
    >>> Entry.objects.filter(blog__pk=3)        # __pk implies __id__exact

在 ``LIKE`` 语句中转义百分号和下划线
-------------------------------------------------------------

字段查找相当于 ``LIKE`` SQL 语句（``iexact``、``contains``、``icontains``、``startswith``、``istartswith``、``endswith`` 和 ``iendswith``，它会自动转义两个特殊符号 —— 百分号和下划线。（在 ``LIKE`` 语句中，百分号表示多字符匹配，而下划线表示单字符匹配。）

这就意味着我们可以直接使用这两个字符，而不用考虑他们的 SQL 语义。例如，要查询大标题中含有一个百分号的 entry::

    >>> Entry.objects.filter(headline__contains='%')

Django 会处理转义；最终的 SQL 看起来会是这样：

.. code-block:: sql

    SELECT ... WHERE headline LIKE '%\%%';

下划线和百分号的处理方式相同，Django 都会自动转义。

.. _caching-and-querysets:

缓存和 ``QuerySet``
--------------------------

每个 :class:`~django.db.models.query.QuerySet` 都包含一个缓存，以减少对数据库的访问。要编写高效代码，就要理解缓存是如何工作的。

一个 :class:`~django.db.models.query.QuerySet` 时刚刚创建的时候，缓存是空的。:class:`~django.db.models.query.QuerySet` 第一次运行时，会执行数据库查询，接下来 Django 就在 :class:`~django.db.models.query.QuerySet` 的缓存中保存查询的结果，并根据请求返回这些结果（比如，后面再次调用这个  :class:`~django.db.models.query.QuerySet` 的时候）。再次运行 :class:`~django.db.models.query.QuerySet` 时就会重用这些缓存结果。

要牢住上面所说的缓存行为，否则在使用 :class:`~django.db.models.query.QuerySet` 时可能会给你造成不小的麻烦。例如，创建下面两个 :class:`~django.db.models.query.QuerySet`，并对它们求值，然后释放::

    >>> print([e.headline for e in Entry.objects.all()])
    >>> print([e.pub_date for e in Entry.objects.all()])

这就意味着相同的数据库查询将执行两次，事实上读取了两次数据库。而且，这两次读出来的列表可能并不完全相同，因为存在这种可能：在两次读取之间，某个 ``Entry`` 被添加到数据库中，或是被删除了。

要避免这个问题，只要简单地保存 :class:`~django.db.models.query.QuerySet` 然后重用即可::

    >>> queryset = Entry.objects.all()
    >>> print([p.headline for p in queryset]) # Evaluate the query set.
    >>> print([p.pub_date for p in queryset]) # Re-use the cache from the evaluation.

何时 ``QuerySet`` 不会被缓存
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

查询集不会永远缓存它们的结果。当只对查询集的 *部分* 进行求值时会检查缓存，但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。特别地，这意味着使用切片或索引来 :ref:`limiting the queryset <limiting-querysets>` 将不会填充缓存。

例如，重复获取查询集对象中一个特定的索引将每次都查询数据库::

    >>> queryset = Entry.objects.all()
    >>> print(queryset[5]) # Queries the database
    >>> print(queryset[5]) # Queries the database again

然而，如果已经对全部查询集求值过，则将检查缓存::

    >>> queryset = Entry.objects.all()
    >>> [entry for entry in queryset] # Queries the database
    >>> print(queryset[5]) # Uses cache
    >>> print(queryset[5]) # Uses cache

下面是一些其它例子，它们会使得全部的查询集被求值并填充到缓存中::

    >>> [entry for entry in queryset]
    >>> bool(queryset)
    >>> entry in queryset
    >>> list(queryset)

.. note::

    简单地打印查询集不会填充缓存。因为 ``__repr__()`` 调用只返回全部查询集的一个切片。

.. _complex-lookups-with-q:

用 ``Q`` 对象实现复杂查找
==================================

在 :meth:`~django.db.models.query.QuerySet.filter` 等函式中关键字参数彼此之间都是“AND”关系。如果你要执行更复杂的查询（比如，实现筛选条件的 ``OR`` 关系），可以使用 :class:`Q 对象 <django.db.models.Q>`。

:class:`Q 对象 <django.db.models.Q>` （``django.db.models.Q``） 是用来封装一组查询关键字的对象。这里提到的查询关键字请查看上面的“字段查找”。

例如，下面这个 ``Q`` 对象封装了一个单独的 ``LIKE`` 查询::

    from django.db.models import Q
    Q(question__startswith='What')

``Q`` 对象可以用 ``&`` 和 ``|`` 运算符进行连接。当某个操作连接两个 ``Q`` 对象时，就会产生一个新的等价的 ``Q`` 对象。

例如，下面这段语句就产生了一个 ``Q`` ，这是用“OR”关系连接的两个 ``"question__startswith"`` 查询::

    Q(question__startswith='Who') | Q(question__startswith='What')

上面的例子等价于下面的 SQL ``WHERE`` 从句::

    WHERE question LIKE 'Who%' OR question LIKE 'What%'

你可以用 ``&`` 和 ``|`` 连接任意多的 ``Q`` 对象，而且可以用括号分组。``Q`` 对象也可以用 ``~`` 操作取反，而且普通查询和取反查询（``NOT``）可以连接在一起使用::

    Q(question__startswith='Who') | ~Q(pub_date__year=2005)

每种查询函式（比如
:meth:`~django.db.models.query.QuerySet.filter`、
:meth:`~django.db.models.query.QuerySet.exclude`、
:meth:`~django.db.models.query.QuerySet.get`）除了能接收关键字参数以外，也能以位置参数的形式接受一个或多个 ``Q`` 对象。如果你给查询函式传递了多个 ``Q`` 对象，那么它们彼此间都是“AND”关系。例如::

    Poll.objects.get(
        Q(question__startswith='Who'),
        Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))
    )

... 大体可以翻译为下面的 SQL::

    SELECT * from polls WHERE question LIKE 'Who%'
        AND (pub_date = '2005-05-02' OR pub_date = '2005-05-06')

查找函式可以混用 ``Q`` 对象和关键字参数。查询函式的所有参数（``Q`` 关系和关键字参数）都是“AND”关系。但是，如果参数中有 ``Q`` 对象，它必须排在所有的关键字参数之前。例如::

    Poll.objects.get(
        Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),
        question__startswith='Who',
    )

... 是一个有效的查询。但下面这个查询虽然看上去和前者等价::

    # INVALID QUERY
    Poll.objects.get(
        question__startswith='Who',
        Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))
    )

... 但这个查询却是无效的。

.. seealso::

    在 Django 的单元测试 `OR 查询实例`_ 中展示了 ``Q`` 的用例。

    .. _OR 查询实例: https://github.com/django/django/blob/master/tests/or_lookups/tests.py

对象比较
=================

要比较两个对象，就和 Python 一样，使用双等号运算符： ``==``。实际上比较的是两个模型的主键值。

以上面的 ``Entry`` 为例，下面两个语句是等价的::

    >>> some_entry == other_entry
    >>> some_entry.id == other_entry.id

如果模型的主键名称不是 ``id``，也没关系。Django 会自动比较主键的值，而不管他们的名称是什么。例如，如果一个模型的主键字段名称是 ``name``，那么下面两个语句是等价的::

    >>> some_obj == other_obj
    >>> some_obj.name == other_obj.name

.. _topics-db-queries-delete:

对象删除
================

删除方法就是 :meth:`~django.db.models.Model.delete`。它运行时立即删除对象而不返回任何值。例如::

    >>> e.delete()
    (1, {'weblog.Entry': 1})

.. versionchanged:: 1.9

    The return value describing the number of objects deleted was added.

你也可以一次性删除多个对象。每个 :class:`~django.db.models.query.QuerySet` 都有一个 :meth:`~django.db.models.query.QuerySet.delete` 方法，它一次性删除 :class:`~django.db.models.query.QuerySet` 中所有的对象。

例如，下面的代码将删除 ``pub_date`` 是 2005 年的 ``Entry`` 对象::

    >>> Entry.objects.filter(pub_date__year=2005).delete()
    (5, {'webapp.Entry': 5})

要牢记这一点：无论在什么情况下，``QuerySet`` 中的 ``delete()`` 方法都只使用一条 SQL 语句一次性删除所有对象，而并不是分别删除每个对象。如果你想使用在模型中自定义的 ``delete()`` 方法，就要自行调用每个对象的删除方法（例如，遍历 :class:`~django.db.models.query.QuerySet`，在每个对象上调用 ``delete()`` 方法），而不是使用 :class:`~django.db.models.query.QuerySet` 中的 :meth:`~django.db.models.query.QuerySet.delete` 方法。
.

.. versionchanged:: 1.9

    The return value describing the number of objects deleted was added.

在 Django 删除对象时，会模仿 SQL 约束 ``ON DELETE CASCADE`` 的行为，换句话说，删除一个对象时也会删除与它相关联的外键对象。例如::

    b = Blog.objects.get(pk=1)
    # This will delete the Blog and all of its Entry objects.
    b.delete()

这种级联的行为可以通过的 :class:`~django.db.models.ForeignKey` 的 :attr:`~django.db.models.ForeignKey.on_delete` 参数自定义。

要注意的是：:meth:`~django.db.models.query.QuerySet.delete` 方法是 :class:`~django.db.models.query.QuerySet` 上的方法，但并不适用于 :class:`~django.db.models.Manager` 本身。这是一种保护机制，是为了避免意外地调用 ``Entry.objects.delete()`` 方法导致 *所有的* 记录被误删除。如果你 *确认* 要删除所有的对象，那么你必须显式地调用::

    Entry.objects.all().delete()

.. _topics-db-queries-copy:

拷贝模型实例
=======================

虽然没有内建的方法用于拷贝模型实例，但还是很容易创建一个新的实例并让它的所有字段都拷贝过来。最简单的方法是，只需要将 ``pk`` 设置为 ``None``。利用我们的博客示例::

    blog = Blog(name='My blog', tagline='Blogging is easy')
    blog.save() # blog.pk == 1

    blog.pk = None
    blog.save() # blog.pk == 2

如果你用继承，那么会复杂一些。考虑下面 ``Blog`` 的子类::

    class ThemeBlog(Blog):
        theme = models.CharField(max_length=200)

    django_blog = ThemeBlog(name='Django', tagline='Django is easy', theme='python')
    django_blog.save() # django_blog.pk == 3

由于继承的工作方式，你必须设置 ``pk`` 和 ``id`` 都为 ``None``::

    django_blog.pk = None
    django_blog.id = None
    django_blog.save() # django_blog.pk == 4

这个过程不会拷贝关联的对象。如果你想拷贝关联关系，你必须编写一些更多的代码。在我们的例子中，``Entry`` 有一个到 ``Author`` 的 ``ManyToManyField``。复制条目后，必须为新条目设置多对多关系::

    entry = Entry.objects.all()[0] # some previous entry
    old_authors = entry.authors.all()
    entry.pk = None
    entry.save()
    entry.authors.set(old_authors)

对于 ``OneToOneField``，必须复制相关对象并将其分配给新对象的字段，以避免违反一对一唯一约束。例如，假设 ``entry`` 已经如上面那样重复::

    detail = EntryDetail.objects.all()[0]
    detail.pk = None
    detail.entry = entry
    detail.save()

.. _topics-db-queries-update:

一次更新多个对象
=================================

有时你想对 :class:`~django.db.models.query.QuerySet` 中的所有对象，一次更新某个字段的值。这个要求可以用 :meth:`~django.db.models.query.QuerySet.update` 方法完成。例如::

    # Update all the headlines with pub_date in 2007.
    Entry.objects.filter(pub_date__year=2007).update(headline='Everything is the same')

这种方法仅适用于非关系字段和 :class:`~django.db.models.ForeignKey` 外键字段。更新非关系字段时，传入的值应该是一个常量。更新 :class:`~django.db.models.ForeignKey` 字段时，传入的值应该是你想关联的那个类的某个实例。例如::

    >>> b = Blog.objects.get(pk=1)

    # Change every Entry so that it belongs to this Blog.
    >>> Entry.objects.all().update(blog=b)

``update()`` 方法也是即时生效，不返回任何值的 (which may not be equal to the number of rows updated if
some rows already have the new value)。在 :class:`~django.db.models.query.QuerySet` 进行更新时，唯一的限制就是一次只能更新一个数据表：当前模型的主表。所以不要尝试更新关联表和与此类似的操作，因为这是不可能运行的。例如::

    >>> b = Blog.objects.get(pk=1)

    # Update all the headlines belonging to this Blog.
    >>> Entry.objects.select_related().filter(blog=b).update(headline='Everything is the same')

要小心的是：``update()`` 方法是直接翻译成一条 SQL 语句的。因此它是直接地一次完成所有更新。它不会调用你的模型中的 :meth:`~django.db.models.Model.save` 方法，也不会发出 ``pre_save`` 和 ``post_save`` 信号（这些信号在调用 :meth:`~django.db.models.Model.save` 方法时产生）。or honor the
:attr:`~django.db.models.DateField.auto_now` field option.
如果你想保存 :class:`~django.db.models.query.QuerySet` 中的每个对象，并且调用每个对象各自的 :meth:`~django.db.models.Model.save` 方法，那么你不必另外多写一个函式。只要遍历这些对象，依次调用 :meth:`~django.db.models.Model.save` 方法即可::

    for item in my_queryset:
        item.save()

对 update 的调用也可以使用 :class:`F 表达式 <django.db.models.F>` 来根据模型中的一个字段更新另外一个字段。这对于在当前值的基础上加上一个值特别有用。例如，增加博客中每个条目的广播数::

    >>> Entry.objects.all().update(n_pingbacks=F('n_pingbacks') + 1)

但是，与 ``F()`` 对象在查询时所不同的是，在 filter 和 exclude 子句中，你不能在 ``F()`` 对象中引入关联关系 —— 你只能引用当前模型中要更新的字段。如果你在 ``F()`` 对象引入了 JOIN 关系的对象，就会抛出 ``FieldError`` 异常::

    # THIS WILL RAISE A FieldError
    >>> Entry.objects.update(headline=F('blog__name'))

.. _topics-db-queries-related:

对象关联
===============

当你定义在模型定义关系时（例如，
:class:`~django.db.models.ForeignKey`、
:class:`~django.db.models.OneToOneField` 或
:class:`~django.db.models.ManyToManyField`）model 的实例自带一套很方便的 API 以获取关联的对象。

以最上面的模型为例，一个 ``Entry`` 对象 ``e`` 能通过 ``blog`` 属性获得相关联的 ``Blog`` 对象：``e.blog``。

（在场景背后，这个功能是由 Python 的 descriptors_ 实现的。如果你对此感兴趣，可以了解一下。）

Django 也提供反向获取关联对象的 API，就是由从被关联的对象得到其定义关系的主对象。例如，一个 ``Blog`` 类的实例 ``b`` 对象通过 ``entry_set`` 属性得到所有相关联的 ``Entry`` 对象列表：``b.entry_set.all()``。

这一节所有的例子都使用本页顶部所列出的 ``Blog``、``Author`` 和 ``Entry`` 模型。

.. _descriptors: http://users.rcn.com/python/download/Descriptor.htm

一对多关系
-------------------------

正向
~~~~~~~

如果一个模型有一个 :class:`~django.db.models.ForeignKey` 字段，我们只要通过使用关联模型的名称就可以得到相关联的外键对象。

例如::

    >>> e = Entry.objects.get(id=2)
    >>> e.blog # Returns the related Blog object.

你可以设置和获得外键属性。正如你所期望的，改变外键的行为并不引发数据库操作，直到你调用 :meth:`~django.db.models.Model.save` 方法时，才会保存到数据库。例如::

    >>> e = Entry.objects.get(id=2)
    >>> e.blog = some_blog
    >>> e.save()

如果外键字段 :class:`~django.db.models.ForeignKey` 有一个 ``null=True`` 的设置（它允许外键接受空值 ``NULL``），你可以赋给它空值 ``None``。例如::

    >>> e = Entry.objects.get(id=2)
    >>> e.blog = None
    >>> e.save() # "UPDATE blog_entry SET blog_id = NULL ...;"

在一对多关系中，第一次正向获取关联对象时，关联对象会被缓存。其后根据外键访问时这个实例，就会从缓存中获得它。例如::

    >>> e = Entry.objects.get(id=2)
    >>> print(e.blog)  # Hits the database to retrieve the associated Blog.
    >>> print(e.blog)  # Doesn't hit the database; uses cached version.

要注意的是，:class:`~django.db.models.query.QuerySet` 的 :meth:`~django.db.models.query.QuerySet.select_related` 方法提前将所有的一对多关系放入缓存中。例如::

    >>> e = Entry.objects.select_related().get(id=2)
    >>> print(e.blog)  # Doesn't hit the database; uses cached version.
    >>> print(e.blog)  # Doesn't hit the database; uses cached version.

.. _backwards-related-objects:

逆向关联
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

如果模型有一个 :class:`~django.db.models.ForeignKey` 外键字段，那么外联模型的实例可以通过访问 :class:`~django.db.models.Manager` 来得到所有相关联的源模型的实例。默认情况下，这个 :class:`~django.db.models.Manager` 被命名为 ``FOO_set``, 这里面的 ``FOO`` 就是源模型的小写名称。这个 :class:`~django.db.models.Manager` 返回 ``QuerySets``，它是可过滤和可操作的，在上面“对象获取”有提及。

例如::

    >>> b = Blog.objects.get(id=1)
    >>> b.entry_set.all() # Returns all Entry objects related to Blog.

    # b.entry_set is a Manager that returns QuerySets.
    >>> b.entry_set.filter(headline__contains='Lennon')
    >>> b.entry_set.count()

你可以通过在 :class:`~django.db.models.ForeignKey` 的定义中设置 :attr:`~django.db.models.ForeignKey.related_name` 的值来覆写 ``FOO_set`` 的名称。例如，如果 ``Entry`` 模型中做一下更改：``blog = ForeignKey(Blog, on_delete=models.CASCADE,
related_name='entries')``，那么接下来就会如我们看到这般::

    >>> b = Blog.objects.get(id=1)
    >>> b.entries.all() # Returns all Entry objects related to Blog.

    # b.entries is a Manager that returns QuerySets.
    >>> b.entries.filter(headline__contains='Lennon')
    >>> b.entries.count()

.. _using-custom-reverse-manager:

使用自定义的反向管理器
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

默认情况下，用于反向关联关系的 :class:`~django.db.models.fields.related.RelatedManager` 是该模型 :ref:`default manager <manager-names>` 的子类。如果你想为一个查询指定一个不同的管理器，你可以使用下面的语法::

    from django.db import models

    class Entry(models.Model):
        #...
        objects = models.Manager()  # Default Manager
        entries = EntryManager()    # Custom Manager

    b = Blog.objects.get(id=1)
    b.entry_set(manager='entries').all()

如果 ``EntryManager`` 在它的 ``get_queryset()`` 方法中使用默认的过滤，那么该过滤将适用于 ``all()`` 调用。

当然，指定一个自定义的管理器还可以让你调用自定义的方法::

    b.entry_set(manager='entries').is_published()

处理关联对象的其它方法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

除了在上面“获取对象”一节中定义的 :class:`~django.db.models.query.QuerySet` 方法之外，:class:`~django.db.models.ForeignKey` :class:`~django.db.models.Manager` 还有其它方法用于处理关联的对象集合。下面是每个方法的大概，完整的细节可以在 :doc:`关联对象参考 </ref/models/relations>` 中找到。

``add(obj1, obj2, ...)``
    将某个特定的模型对象添加到被关联对象集合中。

``create(**kwargs)``
    创建并保存一个新对象，然后将这个对象加被关联对象的集合中，然后返回这个新对象。

``remove(obj1, obj2, ...)``
    将某个特定的对象从被关联对象集合中去除。

``clear()``
    清空被关联对象集合。

``set(objs)``
    替换被关联对象集合。

想一次指定关联集合的成员，那么只要用 ``set()`` 给关联集合分配一个可迭代的对象即可。它可以包含对象的实例，也可以只包含主键的值。例如::

    b = Blog.objects.get(id=1)
    b.entry_set.set([e1, e2])

在这个例子中，``e1`` 和 ``e2`` 可以是完整的 Entry 实例，也可以是整型的主键值。

如果 ``clear()`` 方法是可用的，在迭代器（上例中就是一个列表）中的对象加入到 ``entry_set`` 之前，已存在于关联集合中的所有对象将被清空。如果 ``clear()`` 方法 *不* 可用，原有的关联集合中的对象就不受影响，继续存在。

这一节提到的每一个 "reverse" 操作都是实时操作数据库的，每一个添加，创建，删除操作都会及时保存将结果保存到数据库中。

.. _m2m-reverse-relationships:

多对多关系
--------------------------

在多对多关系的任何一方都可以使用 API 访问相关联的另一方。多对多的 API 用起来和上面提到的“逆向”一对多关系关系非常相象。

唯一的差虽就在于属性的命名：:class:`~django.db.models.ManyToManyField` 所在的模型（为了方便，我称之为源模型 A）使用字段本身的名称来访问关联对象；而被关联的另一方则使用 A 的小写名称加上 ``'_set'`` 后缀（这与逆向的一对多关系非常相象）。

下面这个例子会让人更容易理解::

    e = Entry.objects.get(id=3)
    e.authors.all() # Returns all Author objects for this Entry.
    e.authors.count()
    e.authors.filter(name__contains='John')

    a = Author.objects.get(id=5)
    a.entry_set.all() # Returns all Entry objects for this Author.

与 :class:`~django.db.models.ForeignKey` 一样，:class:`~django.db.models.ManyToManyField` 也可以指定 :attr:`~django.db.models.ManyToManyField.related_name`。在上面的例子中，如果 ``Entry`` 中的 :class:`~django.db.models.ManyToManyField` 指定 ``related_name='entries'``，那么接下来每个 ``Author`` 实例的 ``entry_set`` 属性都被 ``entries`` 所代替。

一对一关系
------------------------

相对于多对一关系而言，一对一关系不是非常简单的。如果你在模型中定义了一个 :class:`~django.db.models.OneToOneField` 关系，那么你就可以用这个字段的名称做为属性来访问其所关联的对象。

例如::

    class EntryDetail(models.Model):
        entry = models.OneToOneField(Entry, on_delete=models.CASCADE)
        details = models.TextField()

    ed = EntryDetail.objects.get(id=2)
    ed.entry # Returns the related Entry object.

与“reverse”查询不同的是，一对一关系的关联对象也可以访问 :class:`~django.db.models.Manager` 对象，但是这个 :class:`~django.db.models.Manager` 表现一个单独的对象，而不是一个列表::

    e = Entry.objects.get(id=2)
    e.entrydetail # returns the related EntryDetail object

如果一个空对象被赋予关联关系，Django 就会抛出一个 ``DoesNotExist`` 异常。

和你定义正向关联所用的方式一样，类的实例也可以赋予逆向关联方系::

    e.entrydetail = ed

关系中的反向连接是如何做到的？
--------------------------------------------

其他对象关系的映射（ORM）需要你在关联双方都定义关系。而 Django 的开发者则认为这违背了 DRY 原则（Don't Repeat Yourself），所以 Django 只需要你在一方定义关系即可。

但仅由一个模型类并不能知道其他模型类是如何与它关联的，除非是其他模型也被载入，那么这是如何办到的？

答案就在于 :data:`app registry <django.apps.apps>`。当 Django 启动，会遍历 :setting:`INSTALLED_APPS`，然后在所有应用遍历所导入的 ``models`` 模块，每当新模型创建时，Django 会为关联模型创建必要的反向连接。如果关联的模型还没有导入，Django 将保存关联关系的记录并在最终关联的模型导入时添加这些关联关系。

由于这个原因，你使用的所有模型都定义在 :setting:`INSTALLED_APPS` 列出的应用中就显得特别重要。否则，反向的关联关系将不能正确工作。

在关联对象上的查询
----------------------------

包含关联对象的查询与包含普通字段值的查询都遵循相同的规则。为某个查询指定某个值的时候，你可以使用一个类实例，也可以使用对象的主键值。

例如，如果你有一个 Blog 对象 ``b``，它的 ``id=5``，下面三个查询是一样的::

    Entry.objects.filter(blog=b) # Query using object instance
    Entry.objects.filter(blog=b.id) # Query using id from instance
    Entry.objects.filter(blog=5) # Query using id directly

回归到原始的 SQL
=======================

如果你发现需要编写的 SQL 查询对于 Django 的数据库映射机制太复杂，你可以回归到手工编写 SQL。Django 对于编写原始的 SQL 查询有多个选项；参见 :doc:`/topics/db/sql`。

最后，值得注意的是 Django 的数据库层只是数据库的一个接口。你可以利用其它工具、编程语言或数据库框架来访问数据库；对于数据库，Django 没有什么特别的地方。
