========
管理器
========

.. currentmodule:: django.db.models

.. class:: Manager()

``Manager`` 是一个接口，数据库查询操作通过它提供给 Django 的模型。Django 应用的每个模型至少拥有一个 ``Manager``。

``Manager`` 类的工作方式在 :doc:`/topics/db/queries` 文档中阐述，而这篇文档涉及了自定义 ``Manager`` 行为的模型选项。

.. _manager-names:

管理器的名字
=============

通常，Django 为每个模型类添加一个名为 ``objects`` 的 ``Manager``。然而，如果你想将 ``objects`` 用于字段名称，或者你想使用其它名称而不是 ``objects`` 访问 ``Manager``，你可以在每个模型类中重命名它。在模型中定义一个值为 ``models.Manager()`` 的属性，来重命名 ``Manager``。例如::

    from django.db import models

    class Person(models.Model):
        #...
        people = models.Manager()

使用例子中的模型，``Person.objects`` 会抛出 ``AttributeError`` 异常，而 ``Person.people.all()`` 会返回一个包含所有 ``Person`` 对象的列表。

.. _custom-managers:

自定义管理器
===============

在一个特定的模型中，你可以通过继承 ``Manager`` 类来构建一个自定义的 ``Manager``，以及实例化你的自定义 ``Manager``。

你有两个原因可能会自己定义 ``Manager``：向 ``Manager`` 类中添加额外的方法，或者修改 ``Manager`` 最初返回的 ``QuerySet``。

添加额外的管理器方法
----------------------------

为你的模型添加表级（table-level）功能时，采用添加额外的 ``Manager`` 方法是更好的处理方式。（如果要添加行级（row-level）功能 —— 就是说该功能只对某个模型的实例对象起作用。在这种情况下，使用 :ref:`模型方法 <model-methods>` 比使用自定义的 ``Manager`` 方法要更好。）

自定义的 ``Manager`` 方法可以返回你想要的任何数据，而不只是 ``QuerySet``。

例如，下面这个自定义的 ``Manager`` 提供了一个 ``with_counts()`` 方法，它返回所有 ``OpinionPoll`` 对象的列表，而且列表中的每个对象都多了一个名为 ``num_responses`` 的属性，这个属性保存一个聚合查询的结果::

    from django.db import models

    class PollManager(models.Manager):
        def with_counts(self):
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT p.id, p.question, p.poll_date, COUNT(*)
                    FROM polls_opinionpoll p, polls_response r
                    WHERE p.id = r.poll_id
                    GROUP BY p.id, p.question, p.poll_date
                    ORDER BY p.poll_date DESC""")
                result_list = []
                for row in cursor.fetchall():
                    p = self.model(id=row[0], question=row[1], poll_date=row[2])
                    p.num_responses = row[3]
                    result_list.append(p)
            return result_list

    class OpinionPoll(models.Model):
        question = models.CharField(max_length=200)
        poll_date = models.DateField()
        objects = PollManager()

    class Response(models.Model):
        poll = models.ForeignKey(OpinionPoll, on_delete=models.CASCADE)
        person_name = models.CharField(max_length=50)
        response = models.TextField()

在这个例子中，你已经可以使用 ``OpinionPoll.objects.with_counts()`` 得到所有含有  ``num_responses`` 属性的 ``OpinionPoll`` 对象。

这个例子要注意的一点是： ``Manager`` 方法可以访问 ``self.model`` 来得到它所用到的模型类。

修改管理器初始的 ``QuerySet``
------------------------------------------

``Manager`` 自带的 ``QuerySet`` 返回系统中所有的对象。例如，使用下面这个模型::

    from django.db import models

    class Book(models.Model):
        title = models.CharField(max_length=100)
        author = models.CharField(max_length=50)

... ``Book.objects.all()`` 语句将返回数据库中所有的图书。

你可以通过重写 ``Manager.get_queryset()`` 的方法来覆盖 ``Manager`` 自带的 ``QuerySet``。``get_queryset()`` 会根据你所需要的属性返回 ``QuerySet``。

例如，下面的模型有 *两个* ``Manager``，一个返回所有的对象，另一个则只返回作者是 Roald Dahl 的图书::

    # First, define the Manager subclass.
    class DahlBookManager(models.Manager):
        def get_queryset(self):
            return super(DahlBookManager, self).get_queryset().filter(author='Roald Dahl')

    # Then hook it into the Book model explicitly.
    class Book(models.Model):
        title = models.CharField(max_length=100)
        author = models.CharField(max_length=50)

        objects = models.Manager() # The default manager.
        dahl_objects = DahlBookManager() # The Dahl-specific manager.

在这个简单的例子中，``Book.objects.all()`` 将返回数据库中所有的图书。而 ``Book.dahl_objects.all()`` 只返回作者是 Roald Dahl 的图书。

由于 ``get_queryset()`` 返回的是一个 ``QuerySet`` 对象，所以你仍可以对它使用 ``filter()``，``exclude()`` 和其他 ``QuerySet`` 的方法。所以下面这些例子都是可用的::

    Book.dahl_objects.all()
    Book.dahl_objects.filter(title='Matilda')
    Book.dahl_objects.count()

这个例子还展示了另外一个很有意思的技巧：在同一个模型中使用多个管理器。你可以随你所意在一个模型里面添加多个 ``Manager()`` 实例。这是给模型添加通用过滤器的很简单的方法。

例如::

    class AuthorManager(models.Manager):
        def get_queryset(self):
            return super(AuthorManager, self).get_queryset().filter(role='A')

    class EditorManager(models.Manager):
        def get_queryset(self):
            return super(EditorManager, self).get_queryset().filter(role='E')

    class Person(models.Model):
        first_name = models.CharField(max_length=50)
        last_name = models.CharField(max_length=50)
        role = models.CharField(max_length=1, choices=(('A', _('Author')), ('E', _('Editor'))))
        people = models.Manager()
        authors = AuthorManager()
        editors = EditorManager()

在这个例子中，你使用 ``Person.authors.all()``、``Person.editors.all()`` 以及 ``Person.people.all()`` 都会得到和名称相符的结果。

.. _default-managers:

默认管理器
----------------

.. attribute:: Model._default_manager

如果你使用了自定义 ``Manager`` 对象，要注意 Django 中的第一个 ``Manager`` （按照模型中出现的顺序而定）拥有特殊的地位。Django 会将模型中定义的 ``Manager`` 解释为默认的 ``Manager``，并且 Django 中的一部分应用（包括 :djadmin:`dumpdata`）会使用默认的 ``Manager``，除了前面那个模型。因此，要决定默认的管理器时，要小心谨慎，仔细考量，这样才能避免重写 ``get_queryset()`` 导致无法正确地获得数据。

You can specify a custom default manager using :attr:`Meta.default_manager_name
<django.db.models.Options.default_manager_name>`.

If you're writing some code that must handle an unknown model, for example, in
a third-party app that implements a generic view, use this manager (or
:attr:`~Model._base_manager`) rather than assuming the model has an ``objects``
manager.

基础管理器
-------------

.. attribute:: Model._base_manager

.. _managers-for-related-objects:

使用管理器访问关联对象
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

默认情况下，在访问相关对象时（例如 ``choice.poll``），Django 并不使用相关对象的 ``_default_manager``，而是使用一个 ``Model._base_manager`` 管理器类的实例来访问。这是因为 Django 要能从关联对象中获得数据，但这些数据有可能被默认管理器过滤掉（或是无法进行访问）。

如果普通的管理器基类（:class:`django.db.models.Manager`) 并不适用于你的情况，那么你可以通过设置 :attr:`Meta.base_manager_name
<django.db.models.Options.base_manager_name>` 告诉 Django 在你的模型中使用其他管理器。

Manager's aren't used when querying on related models. For example, if the
``Question`` model :ref:`from the tutorial <creating-models>` had a ``deleted``
field and a base manager that filters out instances with ``deleted=True``, a
queryset like ``Choice.objects.filter(question__name__startswith='What')``
would include choices related to deleted questions.

不要在这种类型的管理器子类中过滤掉任何结果
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

这种管理器是用来访问关联模型 的对象。 在这种情况下，Django 必须要能看到相关模型的所有对象，所以才能根据关联关系得到 *任何* 数据 。

如果你重写了 ``get_queryset()`` 方法并且过滤掉了一些行数据，Django 将返回不正确的结果。不要这么做！ 在 ``get_queryset()`` 方法中过滤掉数据，会使得它所在的管理器不适于用做默认管理器。

.. _calling-custom-queryset-methods-from-manager:

调用自定义的 ``QuerySet``
----------------------------------------------------

虽然大多数标准 ``QuerySet`` 的方法可以从 ``Manager`` 中直接访问到，但是这是一个例子，访问了定义在自定义  ``QuerySet`` 上的额外方法，如果你也在 ``Manager`` 上面实现了它们::

    class PersonQuerySet(models.QuerySet):
        def authors(self):
            return self.filter(role='A')

        def editors(self):
            return self.filter(role='E')

    class PersonManager(models.Manager):
        def get_queryset(self):
            return PersonQuerySet(self.model, using=self._db)

        def authors(self):
            return self.get_queryset().authors()

        def editors(self):
            return self.get_queryset().editors()

    class Person(models.Model):
        first_name = models.CharField(max_length=50)
        last_name = models.CharField(max_length=50)
        role = models.CharField(max_length=1, choices=(('A', _('Author')), ('E', _('Editor'))))
        people = PersonManager()

这个例子展示了如何直接从管理器 ``Person.people`` 调用 ``authors()`` 和 ``editors()``。

.. _create-manager-with-queryset-methods:

创建带 ``QuerySet`` 方法的管理器
--------------------------------------------

对于上面的例子，同一个方法需要在 ``QuerySet`` 和 ``Manager`` 上创建两份副本，作为替代，:meth:`QuerySet.as_manager()  <django.db.models.query.QuerySet.as_manager>` 可以创建一个 ``Manager`` 的实例，它拥有自定义的 ``QuerySet`` 的方法::

    class Person(models.Model):
        ...
        people = PersonQuerySet.as_manager()

通过 :meth:`QuerySet.as_manager() <django.db.models.query.QuerySet.as_manager>` 创建的 ``Manager`` 实例，实际上等价于上面例子中的 ``PersonManager``。

并不是每个 ``QuerySet`` 的方法都在 ``Manager`` 层面上有意义。比如 :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>`，我们有意防止它复制到 ``Manager`` 类中。

方法按照以下规则进行复制：

- 公共方法默认被复制。
- 私有方法（前面带一个下划线）默认不被复制。
- 带 ``queryset_only`` 属性，并且值为 ``False`` 的方法总是被复制。
- 带 ``queryset_only`` 属性，并且值为 ``True`` 的方法不会被复制。

例如::

    class CustomQuerySet(models.QuerySet):
        # Available on both Manager and QuerySet.
        def public_method(self):
            return

        # Available only on QuerySet.
        def _private_method(self):
            return

        # Available only on QuerySet.
        def opted_out_public_method(self):
            return
        opted_out_public_method.queryset_only = True

        # Available on both Manager and QuerySet.
        def _opted_in_private_method(self):
            return
        _opted_in_private_method.queryset_only = False

``from_queryset()``
~~~~~~~~~~~~~~~~~~~

.. classmethod:: from_queryset(queryset_class)

在进一步的使用中，你可能想创建一个自定义 ``Manager`` 和一个自定义 ``QuerySet``。你可以调用 ``Manager.from_queryset()``，它会返回 ``Manager`` 的一个 *子类*，带有自定义 ``QuerySet`` 所有方法的副本::

    class BaseManager(models.Manager):
        def manager_only_method(self):
            return

    class CustomQuerySet(models.QuerySet):
        def manager_and_queryset_method(self):
            return

    class MyModel(models.Model):
        objects = BaseManager.from_queryset(CustomQuerySet)()

你也可以在一个变量中储存生成的类::

    CustomManager = BaseManager.from_queryset(CustomQuerySet)

    class MyModel(models.Model):
        objects = CustomManager()

.. _custom-managers-and-inheritance:

自定义管理器和模型继承
-------------------------------------

下面是 Django 如何处理自定义管理器和 :ref:`模型继承 <model-inheritance>` 的：

#. 定义在基类中的管理器总是被子类继续的，是按 Python 的命名解析顺序解析的（首先是子类中的命名覆盖所有的，然后是第一个父类的，以此类推）。

#. 如果没有显式声明管理器，那么 Django 就会自动添加 ``objects`` 管理器。

#. 从 :attr:`Meta.default_manager_name
   <django.db.models.Options.default_manager_name>`，或模型声明的第一个管理器，或第一个父类继承默认管理器中，任选其一作为类的默认管理器。

.. versionchanged:: 1.10

    在老版本中，管理器的继承取决于模型继承的类型（例如，:ref:`abstract-base-classes`、:ref:`multi-table-inheritance` 或者 :ref:`proxy-models`），特别是选择默认管理器。

如果你想在一组模型上安装一系列自定义管理器，上面提到的这些规则就已经为你的实现提供了必要的灵活性。你可以继承一个抽象基类，但仍要自定义默认的管理器。例如，假设你的基类是这样的::

    class AbstractBase(models.Model):
        # ...
        objects = CustomManager()

        class Meta:
            abstract = True

如果你在基类中没有定义管理器，直接使用上面的代码，默认管理器就是从基类中继承的 ``objects``::

    class ChildA(AbstractBase):
        # ...
        # This class has CustomManager as the default manager.
        pass

如果你想从 ``AbstractBase`` 继承，却又想提供另一个默认管理器，那么你可以在子类中定义默认管理器::

    class ChildB(AbstractBase):
        # ...
        # An explicit default manager.
        default_manager = OtherManager()

在这个例子中，``default_manager`` 就是默认的管理器。从基类中继承的 ``objects`` 管理器仍是可用的。只不过它不再是默认管理器罢了。

最后再举个例子，假设你想在子类中再添加一个额外的管理器，但是很想使用从 ``AbstractBase`` 继承的管理器做为默认管理器。那么，你不在直接在子类中添加新的管理器，否则就会覆盖掉默认管理器，而且你必须对派生自这个基类的所有子类都显示指定管理器。 解决办法就是在另一个基类中添加新的管理器，然后继承时将其放在默认管理器所在的基类 *之后*。例如::

    class ExtraManager(models.Model):
        extra_manager = OtherManager()

        class Meta:
            abstract = True

    class ChildC(AbstractBase, ExtraManager):
        # ...
        # Default manager is CustomManager, but OtherManager is
        # also available via the "extra_manager" attribute.
        pass

注意在抽象模型上面 *定义* 一个自定义管理器的时候，不能 *调用* 任何使用这个抽象模型的方法。就像::

    ClassA.objects.do_something()

是可以的，但是::

    AbstractBase.objects.do_something()

会抛出一个异常。这是因为，管理器被设计用来封装对象集合管理的逻辑。由于抽象的对象中并没有一个集合，管理它们是毫无意义的。如果你写了应用在抽象模型上的功能，你应该把功能放到抽象模型的 ``staticmethod`` 或者 ``classmethod`` 中。

实现上的注意事项
-----------------------

无论你向自定义 ``Manager`` 中添加了什么功能，都必须可以得到 ``Manager`` 实例的一个浅表副本；例如，下面的代码必定正常运行::

    >>> import copy
    >>> manager = MyManager()
    >>> my_copy = copy.copy(manager)

Django 在一些查询中会创建管理器的浅表副本；如果你的管理器不能被复制，查询就会失败。

这对于大多数自定义管理器不是什么大问题。如果你只是添加一些简单的方法到你的 ``Manager`` 中，不太可能会把你的 ``Manager`` 实例变为不可复制的。但是，如果你覆盖了 ``__getattr__``，或者其它 ``Manager`` 中控制对象状态的私有方法，你应该确保不会影响到 ``Manager`` 的复制。
