=================
查询表达式
=================

.. currentmodule:: django.db.models

查询表达式可以作为过滤，分组，注解或者是聚合的一个值或者是计算。这里（文档中）有很多内置表达式可以帮助你完成自己的查询。表达式可以组合，甚至是嵌套，来完成更加复杂的计算。

.. versionchanged:: 1.9

    增加了在创建新模型实例时支持使用表达式。

支持的算术
====================

Django 支持在查询表达式使用加减乘除，求模，幂运算，Python 常量，变量甚至是其它表达式。

一些例子
=============

.. code-block:: python

    from django.db.models import F, Count
    from django.db.models.functions import Length, Upper, Value

    # Find companies that have more employees than chairs.
    Company.objects.filter(num_employees__gt=F('num_chairs'))

    # Find companies that have at least twice as many employees
    # as chairs. Both the querysets below are equivalent.
    Company.objects.filter(num_employees__gt=F('num_chairs') * 2)
    Company.objects.filter(
        num_employees__gt=F('num_chairs') + F('num_chairs'))

    # How many chairs are needed for each company to seat all employees?
    >>> company = Company.objects.filter(
    ...    num_employees__gt=F('num_chairs')).annotate(
    ...    chairs_needed=F('num_employees') - F('num_chairs')).first()
    >>> company.num_employees
    120
    >>> company.num_chairs
    50
    >>> company.chairs_needed
    70

    # Create a new company using expressions.
    >>> company = Company.objects.create(name='Google', ticker=Upper(Value('goog')))
    # Be sure to refresh it if you need to access the field.
    >>> company.refresh_from_db()
    >>> company.ticker
    'GOOG'

    # Annotate models with an aggregated value. Both forms
    # below are equivalent.
    Company.objects.annotate(num_products=Count('products'))
    Company.objects.annotate(num_products=Count(F('products')))

    # Aggregates can contain complex computations also
    Company.objects.annotate(num_offerings=Count(F('products') + F('services')))

    # Expressions can also be used in order_by()
    Company.objects.order_by(Length('name').asc())
    Company.objects.order_by(Length('name').desc())


内置表达式
====================

.. note::

    这些表达式定义在 ``django.db.models.expressions`` 和 ``django.db.models.aggregates`` 中, 但为了方便，通常可以直接从 :mod:`django.db.models` 导入。

``F()`` 表达式
-------------------

.. class:: F

``F()`` 对象代表了一个模型的字段或注释列的值。使用它就可以直接引用模型字段的值和执行数据库操作而不用再把它们查询出来放到 Python 内存中。

反而，Django 使用 ``F()`` 对象生成一个 SQL 表达式，来描述数据库层级所需要的操作。

这些通过一个例子可以很容易的理解。往常，我们会这样做::

    # Tintin filed a news story!
    reporter = Reporters.objects.get(name='Tintin')
    reporter.stories_filed += 1
    reporter.save()

这里呢，我们把 ``reporter.stories_filed`` 的值从数据库取出放到内存中并用我们熟悉的 Python 运算符操作它，最后再把它保存到数据库。然而，我们还可以这样做::

    from django.db.models import F

    reporter = Reporters.objects.get(name='Tintin')
    reporter.stories_filed = F('stories_filed') + 1
    reporter.save()

虽然 ``reporter.stories_filed = F('stories_filed') + 1`` 看起来像一个正常的 Python 分配值赋给一个实例属性，事实上这是一个描述数据库操作的 SQL 构造。

当 Django 遇到 ``F()`` 实例，它复写了标准的 Python 运算符创建一个封装的 SQL 表达式。在这个例子中，``reporter.stories_filed`` 就代表了一个指示数据库对该字段进行增量的命令。

无论 ``reporter.stories_filed`` 的值是或曾是什么，Python 一无所知 —— 这完全是由数据库去处理的。所有的Python，通过 Django 的 ``F()`` 类，只是去创建 SQL 语法参考字段和描述操作。

为了获得用这种方法保存的新值，此对象应重新加载::

   reporter = Reporters.objects.get(pk=reporter.pk)
   # Or, more succinctly:
   reporter.refresh_from_db()

和上面单独实例的操作一样，``F()`` 配合 ``update()`` 可以应用于对象实例的 ``QuerySets`` 这减少了我们上面使用的两个查询 —— ``get()`` 和 :meth:`~Model.save()` —— 仅一个::

    reporter = Reporters.objects.filter(name='Tintin')
    reporter.update(stories_filed=F('stories_filed') + 1)

我们可以使用 :meth:`~django.db.models.query.QuerySet.update()` 方法批量地增加多个对象的字段值。这比先从数据库查询后，通过循环一个个增加，并一个个保存要快的很多::

    Reporter.objects.all().update(stories_filed=F('stories_filed') + 1)

``F()`` 表达式的效率上的优点主要体现在：

* 直接通过数据库操作而不是 Python
* 减少数据库查询次数

.. _avoiding-race-conditions-using-f:

使用 ``F()`` 避免紊乱情况
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

使用 ``F()`` 的另一个好处是通过数据库 —— 而不是 Python —— 来更新字段值以避免 *紊乱情况*。

如果两个 Python 线程执行上面第一个例子中的代码，一个线程可能在另一个线程刚从数据库中获取完字段值后获取、增加、保存该字段值。第二个线程保存的值将会基于原始字段值；第一个线程的工作将会丢失。

如果让数据库对更新字段负责，这个过程将变得更稳健：它将只会在 :meth:`~Model.save()` 或 ``update()`` 执行时根据数据库中该字段值来更新字段，而不是基于实例之前获取的字段值。

``F()`` 作业在 ``Model.save()`` 后保持不变
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``F()`` 分配给模型字段的对象在保存模型实例后保持不变，并将应用于每个 :meth:`~Model.save()`。例如::

    reporter = Reporters.objects.get(name='Tintin')
    reporter.stories_filed = F('stories_filed') + 1
    reporter.save()

    reporter.name = 'Tintin Jr.'
    reporter.save()

在这个例子中，``stories_filed`` 将会更新两次。如果它初始为 ``1``，最终值将会是 ``3``。

在过滤器中使用 ``F()``
~~~~~~~~~~~~~~~~~~~~~~~~

``F()`` 在 ``QuerySet`` 过滤器中也十分有用，它使得使用条件通过字段值而不是 Python 值过滤一组对象变得可能。

这编录在 :ref:` 在查询中使用 F() <using-f-expressions-in-filters>` 中。

.. _using-f-with-annotations:

将 ``F()`` 用于注释
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``F()`` 可用于通过将不同字段与算术相结合来在模型上创建动态字段::

    company = Company.objects.annotate(
        chairs_needed=F('num_employees') - F('num_chairs'))

如果你组合的字段是不同类型，你需要告诉 Django 将返回什么类型的字段。由于 ``F()`` 不直接支持 ``output_field``，您需要使用 :class:`ExpressionWrapper` 包装异常::

    from django.db.models import DateTimeField, ExpressionWrapper, F

    Ticket.objects.annotate(
        expires=ExpressionWrapper(
            F('active_at') + F('duration'), output_field=DateTimeField()))

当引用诸如 ``ForeignKey`` 的关系字段时，``F()`` 返回主键值而不是模型实例::

    >> car = Company.objects.annotate(built_by=F('manufacturer'))[0]
    >> car.manufacturer
    <Manufacturer: Toyota>
    >> car.built_by
    3

.. _func-expressions:

``Func()`` expressions
----------------------

``Func()`` 表达式是所有表达式的基础类型，包括数据库函数如 ``COALESCE`` 和 ``LOWER``，或者 ``SUM`` 之类的聚合。用下面方式可以直接使用::

    from django.db.models import Func, F

    queryset.annotate(field_lower=Func(F('field'), function='LOWER'))

或者它们可以用于构建数据库函数库::

    class Lower(Func):
        function = 'LOWER'

    queryset.annotate(field_lower=Lower('field'))

但是这两种情况都会产生一个每个模型都注释一个额外的 ``field_lower`` 属性的查询集，大致从以下 SQL::

    SELECT
        ...
        LOWER("db_table"."field") as "field_lower"

有关内置数据库函数的列表，请参见 :doc:`database-functions`。

``Func`` API 如下：

.. class:: Func(*expressions, **extra)

    .. attribute:: function

        描述将生成的函数的类属性。具体来说，``function`` 将被插入为 :attr:`template` 中的 ``function`` 占位符。默认为 ``None``。

    .. attribute:: template

        类属性，作为格式字符串，描述为此函数生成的 SQL。默认为 ``'%(function)s(%(expressions)s)'``。

        如果你正在构造像 ``strftime('%W', 'date')`` 的 SQL，并且在查询中需要一个字面的 ``%`` 字符，在 ``template`` 中将它写四次（``%%%%``），因为字符串被插值替换两次：一次在该模版插入到 ``as_sql()`` 时，一次在将 SQL 查询参数插入数据库游标时。

    .. attribute:: arg_joiner

        类属性，表示用于连接 ``expressions`` 列表的字符。默认为 ``', '``。

    .. attribute:: arity

        .. versionadded:: 1.10

        类属性，表示函数接受的参数数量。 如果设置了这个属性，并且使用不同数目的表达式调用该函数，则会抛出 ``TypeError``。默认为 ``None``。

    .. method:: as_sql(compiler, connection, function=None, template=None, arg_joiner=None, **extra_context)

        生成数据库函数的 SQL。

        ``as_vendor()`` 方法应该使用 ``function``，``template``，``arg_joiner`` 和任何其他 ``**extra_context`` 参数来根据需要定制 SQL。例如：

        .. snippet::
            :filename: django/db/models/functions.py

            class ConcatPair(Func):
                ...
                function = 'CONCAT'
                ...

                def as_mysql(self, compiler, connection):
                    return super(ConcatPair, self).as_sql(
                        compiler, connection,
                        function='CONCAT_WS',
                        template="%(function)s('', %(expressions)s)",
                    )

        .. versionchanged:: 1.10

            添加了 ``arg_joiner`` 和 ``**extra_context`` 参数支持。

``*expressions`` 参数是函数将应用于表达式的位置参数列表。表达式将被转换为字符串，用 ``arg_joiner`` 连接在一起，然后作为 ``expressions`` 占位符插入 ``template``。

位置参数可以是表达式或 Python 值。字符串假定为列引用，并且将包装在 ``F()`` 表达式中，而其他值将包装在 ``Value()`` 表达式中。

``**extra`` 是可以插入到 ``template`` 属性中的 ``key=value`` 对。请注意，关键字 ``function``，``template`` 和 ``arg_joiner`` 可用于分别替换同名属性，而无需定义自己的类。``output_field`` 可用于定义预期的返回类型。

``Aggregate()`` 表达式
---------------------------

聚合表达式是 :ref:`Func() 表达式 <func-expressions>` 的一种特殊情况，它通知查询：``GROUP BY`` 子句是必须的。所有 :ref:`aggregate 函数 <aggregation-functions>`，如 ``Sum()`` 和 ``Count()``，继承自 ``Aggregate()``。

由于 ``Aggregate`` 是表达式和​​换行表达式，因此您可以表示一些复杂的计算::

    from django.db.models import Count

    Company.objects.annotate(
        managers_required=(Count('num_employees') / 4) + Count('num_managers'))

``Aggregate`` API 如下：

.. class:: Aggregate(expression, output_field=None, **extra)

    .. attribute:: template

        类属性，作为格式字符串，描述为此聚合生成的 SQL。默认为 ``'%(function)s( %(expressions)s )'``。

    .. attribute:: function

        描述将生成的聚合函数的类属性。具体来说，``function`` 将被插入为 :attr:`template` 中的 ``function`` 占位符。默认为 ``None``。

``expression`` 参数可以是模型上的字段的名称，也可以是另一个表达式。它将转换为字符串，并用作 ``template`` 中的 ``expressions`` 占位符。

``output_field`` 参数需要一个模型字段实例，如 ``IntegerField()`` 或 ``BooleanField()``，Django 在从数据库中检索后将加载该值。通常在实例化模型字段时不需要任何参数，因为与数据验证相关的任何参数（``max_length``，``max_digits`` 等）不会对表达式的输出值强制执行。

注意，只有当 Django 无法确定结果应该是什么字段类型时，才需要 ``output_field``。混合字段类型的复杂表达式应定义所需的 ``output_field``。例如，将 ``IntegerField()`` 和 ``FloatField()`` 添加在一起应该可以有 ``output_field=FloatField()``。

``**extra`` 是可以插入到 ``template`` 属性中的 ``key=value`` 对。

创建自己的聚合函数
-------------------------------------

创建自己的聚合是非常容易的。最低限度，你需要定义 ``function``，但也可以完全自定义生成的 SQL。这里有一个简单的例子::

    from django.db.models import Aggregate

    class Count(Aggregate):
        # supports COUNT(distinct field)
        function = 'COUNT'
        template = '%(function)s(%(distinct)s%(expressions)s)'

        def __init__(self, expression, distinct=False, **extra):
            super(Count, self).__init__(
                expression,
                distinct='DISTINCT ' if distinct else '',
                output_field=IntegerField(),
                **extra
            )


``Value()`` 表达式
-----------------------

.. class:: Value(value, output_field=None)


``Value()`` 对象表示表达式的最小可能组件：简单值。当您需要在表达式中表示整数，布尔或字符串的值时，可以在 ``Value()`` 中包装该值。

您很少需要直接使用 ``Value()``。当您编写表达式 ``F('field') + 1`` 时，Django 隐式包装 ``1`` 在 ``Value()`` 中，允许在更复杂的表达式中使用简单的值。当你想传递一个字符串到一个表达式时，你需要使用 ``Value()``。 大多数表达式将字符串参数解释为字段的名称，如 ``Lower('name')``。

``value`` 参数描述要包括在表达式中的值，例如 ``1``，``True`` 或 ``None``。Django 知道如何将这些 Python 值转换为相应的数据库类型。

``output_field`` 参数应为模型字段实例，如 ``IntegerField()`` 或 ``BooleanField()``，Django 在从数据库中检索后将加载该值。通常在实例化模型字段时不需要任何参数，因为与数据验证相关的任何参数（``max_length``，``max_digits`` 等）不会对表达式的输出值强制执行。

``ExpressionWrapper()`` 表达式
-----------------------------------

.. class:: ExpressionWrapper(expression, output_field)

``ExpressionWrapper`` 简单地包围另一个表达式，并提供对其他表达式可能不可用的属性（例如 ``output_field``）的访问。当对 :ref:`using-f-with-annotations` 中描述的不同类型的 ``F()`` 表达式使用算术时，必须使用 ``ExpressionWrapper``。

条件表达式
-----------------------

条件表达式允许你在查询中使用 :keyword:`if` ... :keyword:`elif` ... :keyword:`else` 逻辑。Django 原生支持 SQL ``CASE`` 表达式。有关更多详细信息，请参阅 :doc:`conditional-expressions`。

原始 SQL 表达式
-------------------

.. currentmodule:: django.db.models.expressions

.. class:: RawSQL(sql, params, output_field=None)

有时数据库表达式不能轻易表达一个复杂的 ``WHERE`` 子句。在这些边缘情况下，使用 ``RawSQL`` 表达式。例如::

    >>> from django.db.models.expressions import RawSQL
    >>> queryset.annotate(val=RawSQL("select col from sometable where othercol = %s", (someparam,)))

这些额外的查找可能不能移植到不同的数据库引擎（因为你直接写 SQL 代码），违背了 DRY 原则，所以你应该尽可能避免它们。

.. warning::

    您应该非常小心地转义用户可以使用 ``params`` 控制的任何参数，以防止 :ref:`SQL 注入攻击 <sql-injection-protection>`。``params`` 是一个必需的参数，用于强制确认你不是使用用户提供的数据插入 SQL。

.. currentmodule:: django.db.models

技术信息
=====================

下面您将找到对库作者有用的技术实施细节。下面的技术 API 和示例将有助于创建可扩展 Django 提供的内建的功能的通用查询表达式。

表达式 API
--------------

查询表达式实现了 :ref:`查询表达式 API <query-expression>`，但也暴露了下面列出的一些额外的方法和属性。所有查询表达式必须从 ``Expression()`` 或相关子类继承。

当查询表达式包装另一个表达式时，它负责调用被包装表达式上的相应方法。

.. class:: Expression

    .. attribute:: contains_aggregate

        告诉 Django 此表达式包含聚合，并且需要将 ``GROUP BY`` 子句添加到查询中。

    .. method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)

        提供在将表达式添加到查询之前对表达式执行任何预处理或验证的机会。还必须在任何嵌套表达式上调用 ``resolve_expression()``。应该返回具有任何必要变换的 ``self`` 的 ``copy()``。

        ``query`` 是后端查询实现。

        ``allow_joins`` 是一个布尔值，允许或拒绝在查询中使用联接。

        ``reuse`` 是用于多连接场景的一组可重用连接。

        ``summarize`` 是一个布尔值，当为 ``True`` 时，表示正在计算的查询是终端聚合查询。

    .. method:: get_source_expressions()

        返回内部表达式的有序列表。例如::

          >>> Sum(F('foo')).get_source_expressions()
          [F('foo')]

    .. method:: set_source_expressions(expressions)

        获取表达式列表并存储它们，以便 ``get_source_expressions()`` 可以返回它们。

    .. method:: relabeled_clone(change_map)

        返回 ``self`` 的克隆（副本），并重新标记任何列别名。创建子查询时，将重命名列别名。``relabeled_clone()`` 也应该在任何嵌套表达式上调用并分配给克隆。

        ``change_map`` 是将旧别名映射到新别名的字典。

        例::

          def relabeled_clone(self, change_map):
              clone = copy.copy(self)
              clone.expression = self.expression.relabeled_clone(change_map)
              return clone

    .. method:: convert_value(self, value, expression, connection, context)

        允许表达式将 ``value`` 强制为更适当类型的钩子。

    .. method:: get_group_by_cols()

        负责返回此表达式的列引用列表。``get_group_by_cols()`` 应在任何嵌套表达式上调用。``F()`` 对象，特别是保存对列的引用。

    .. method:: asc()

        返回准备好以升序排序的表达式。

    .. method:: desc()

        返回准备好以降序排序的表达式。

    .. method:: reverse_ordering()

        通过在 ``order_by`` 调用中反转排序顺序所需的任何修改，返回 ``self``。例如，执行 ``NULLS LAST`` 的表达式将其值更改为 ``NULLS FIRST``。仅对实现类似 ``OrderBy`` 的排序顺序的表达式需要修改。当在查询集上调用 :meth:`~django.db.models.query.QuerySet.reverse()` 时调用此方法。

编写自己的查询表达式
----------------------------------

您可以编写自己的查询表达式类，这些类使用其他查询表达式，并可以与其集成。让我们通过编写一个 ``COALESCE`` SQL 函数的实现，而不使用内建的 :ref:`Func() 表达式 <func-expressions>` 来演示一个例子。

``COALESCE`` SQL 函数定义为获取列或值的列表。它将返回不是 ``NULL`` 的第一列或值。

我们将首先定义用于生成 SQL 的模板，然后使用 ``__init__()`` 方法来设置一些属性::

  import copy
  from django.db.models import Expression

  class Coalesce(Expression):
      template = 'COALESCE( %(expressions)s )'

      def __init__(self, expressions, output_field):
        super(Coalesce, self).__init__(output_field=output_field)
        if len(expressions) < 2:
            raise ValueError('expressions must have at least 2 elements')
        for expression in expressions:
            if not hasattr(expression, 'resolve_expression'):
                raise TypeError('%r is not an Expression' % expression)
        self.expressions = expressions

我们对参数进行一些基本验证，包括至少需要 2 列或值，并确保它们是表达式。我们在这里需要 ``output_field``，以便 Django 知道要将最终结果分配给什么样的模型字段。

现在我们实现预处理和验证。由于我们现在没有任何自己的验证，我们只是委托给嵌套表达式::

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):
        c = self.copy()
        c.is_summary = summarize
        for pos, expression in enumerate(self.expressions):
            c.expressions[pos] = expression.resolve_expression(query, allow_joins, reuse, summarize, for_save)
        return c

接下来，我们编写负责生成 SQL 的方法::

    def as_sql(self, compiler, connection, template=None):
        sql_expressions, sql_params = [], []
        for expression in self.expressions:
            sql, params = compiler.compile(expression)
            sql_expressions.append(sql)
            sql_params.extend(params)
        template = template or self.template
        data = {'expressions': ','.join(sql_expressions)}
        return template % data, params

    def as_oracle(self, compiler, connection):
        """
        Example of vendor specific handling (Oracle in this case).
        Let's make the function name lowercase.
        """
        return self.as_sql(compiler, connection, template='coalesce( %(expressions)s )')

``as_sql()`` 方法可以支持自定义关键字参数，允许 ``as_vendorname()`` 方法覆盖用于生成 SQL 字符串的数据。
使用 ``as_sql()`` 关键字参数进行自定义比在 ``as_vendorname()`` 方法中修改 ``self`` 更好，因为后者在不同的数据库后端运行时会导致错误。如果你的类依赖类的属性来定义数据，考虑在 ``as_sql()`` 方法中允许重写。

我们使用 ``compiler.compile()`` 方法为每个 ``expressions`` 生成 SQL，并用逗号连接结果。然后使用我们的数据填充模板，并返回 SQL 和参数。

我们还定义了一个特定于 Oracle 后端的自定义实现。如果 Oracle 后端正在使用，则将调用 ``as_oracle()`` 函数，而不是 ``as_sql()``。

最后，我们实现允许我们的查询表达式与其他查询表达式一起播放的其他方法::

    def get_source_expressions(self):
        return self.expressions

    def set_source_expressions(self, expressions):
        self.expressions = expressions

让我们看看它是如何工作的::

    >>> from django.db.models import F, Value, CharField
    >>> qs = Company.objects.annotate(
    ...    tagline=Coalesce([
    ...        F('motto'),
    ...        F('ticker_name'),
    ...        F('description'),
    ...        Value('No Tagline')
    ...        ], output_field=CharField()))
    >>> for c in qs:
    ...     print("%s: %s" % (c.name, c.tagline))
    ...
    Google: Do No Evil
    Apple: AAPL
    Yahoo: Internet Company
    Django Software Foundation: No Tagline

添加第三方数据库后端支持
-----------------------------------------------

如果您使用的数据库后端对某个函数使用不同的 SQL 语法，则可以通过在函数的类上猴子补丁一个新方法来增加对该函数的支持。

假设我们正在为 Microsoft's SQL Server 编写一个后端，它使用 SQL
``LEN`` 而不是 ``LENGTH`` 作为 :class:`~functions.Length` 函数。
我们将在 ``Length`` 类上补一个称为 ``as_sqlserver()`` 的新方法::

    from django.db.models.functions import Length

    def sqlserver_length(self, compiler, connection):
        return self.as_sql(compiler, connection, function='LEN')

    Length.as_sqlserver = sqlserver_length

您还可以使用 ``as_sql()`` 的 ``template`` 参数定制 SQL。

我们使用 ``as_sqlserver()``，因为 ``django.db.connection.vendor`` 为后端返回 ``sqlserver``。

第三方后端可以在后端包的顶层 ``__init__.py`` 文件中或在从顶层 ``__init__.py`` 导入的顶层 ``expressions.py``
文件（或包）中注册它们的函数。

对于希望给他们正在使用的后端打补丁的用户项目，此代码应该位于 :meth:`AppConfig.ready()<django.apps.AppConfig.ready>` 方法中。
