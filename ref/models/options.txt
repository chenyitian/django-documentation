======================
模型 ``Meta`` 选项
======================

这篇文档阐述了所有可用的 :ref:`元数据选项 <meta-options>`，你可以在你模型的 ``Meta 类`` 中设置他们。

可用的 ``Meta`` 选项
==========================

.. currentmodule:: django.db.models

``abstract``
------------

.. attribute:: Options.abstract

    如果 ``abstract = True``， 就表示模型是 :ref:`抽象基类 <abstract-base-classes>`.

``app_label``
-------------

.. attribute:: Options.app_label

    如果你的模型定义在 :setting:`INSTALLED_APPS` 的应用之外，必须告诉 Django 该模型属于哪个应用::

        app_label = 'myapp'

    .. versionadded:: 1.9

    如果你想用 ``app_label.object_name`` 或 ``app_label.model_name`` 的格式描述一个模型，你可以分别使用 ``model._meta.label`` 或 ``model._meta.label_lower``。

``base_manager_name``
---------------------

.. attribute:: Options.base_manager_name

    .. versionadded:: 1.10

    该模型的 :attr:`~django.db.models.Model._base_manager` 的 Manager 名称。

``db_table``
------------

.. attribute:: Options.db_table

    该模型所用的数据表的名称::

        db_table = 'music_album'

.. _table-names:

数据表名称
~~~~~~~~~~~

为了节省时间，Django 会根据模型类的名称和包含它的 app 名称自动指定数据表名称，一个模型的数据表名称，由这个模型的“应用标签”（在 :djadmin:`manage.py startapp <startapp>` 中使用的名称）之间加上下划线组成。

举个例子，``bookstore`` 应用(使用 ``manage.py startapp bookstore`` 创建)，里面有个名为``Book`` 的模型，那数据表的名称就是 ``bookstore_book``。

使用 ``Meta 类`` 中的 ``db_table`` 参数来覆写数据表的名称。

数据表名称可以是 SQL 保留字，也可以包含不允许出现在 Python 变量中的特殊字符，这是因为 Django 会自动给列名和表名添加引号。

.. admonition:: 在 MySQL 中使用小写字母为表命名

    当你通过 ``db_table`` 覆写表名称时，强烈推荐使用小写字母给表命名，特别是如果你用了 MySQL 作为后端。详见 :ref:`MySQL 注意事项 <mysql-notes>`。

.. admonition:: Oracle 中表名称的引号处理

   为了遵从 Oracle 中 30 个字符的限制，以及一些常见的约定，Django 会缩短表的名称，而且会把它全部转为大写。在 ``db_table`` 的值外面加上引号来避免这种情况::

       db_table = '"name_left_in_lowercase"'

   这种带引号的名称也可以用于 Django 所支持的其他数据库后端，但是除了 Oracle，引号不起任何作用。详见 :ref:`Oracle 注意事项 <oracle-notes>`。

``db_tablespace``
-----------------

.. attribute:: Options.db_tablespace

    当前模型所使用的 :doc:`数据库表空间 </topics/db/tablespaces>` 的名字。默认值是项目设置中的 :setting:`DEFAULT_TABLESPACE`，如果它存在的话。如果后端并不支持表空间，这个选项可以忽略。

``default_manager_name``
------------------------

.. attribute:: Options.default_manager_name

    .. versionadded:: 1.10

    该模型的 :attr:`~django.db.models.Model._default_manager` 的 Manager 名称。

``default_related_name``
------------------------

.. attribute:: Options.default_related_name

    这个名字会默认被用于一个关联对象到当前对象的关系。默认为 ``<model_name>_set``。

    此选项也会设置 :attr:`~ForeignKey.related_query_name`。

    由于一个字段的反转名称应该是唯一的，当你给你的模型设计子类时，要格外小心。为了规避名称冲突，名称的一部分应该含有 ``'%(app_label)s'`` 和 ``'%(model_name)s'``，它们会被应用标签的名称和模型的名称替换，二者都是小写的。详见 :ref:`抽象模型的关联名称 <abstract-related-name>`。

    .. deprecated:: 1.10

        此属性现在会影响 ``related_query_name``。旧的查找名称被废弃::

            from django.db import models

            class Foo(models.Model):
                pass

            class Bar(models.Model):
                foo = models.ForeignKey(Foo)

                class Meta:
                    default_related_name = 'bars'

        ::

            >>> bar = Bar.objects.get(pk=1)
            >>> # Using model name "bar" as lookup string is deprecated.
            >>> Foo.objects.get(bar=bar)
            >>> # You should use default_related_name "bars".
            >>> Foo.objects.get(bars=bar)

``get_latest_by``
-----------------

.. attribute:: Options.get_latest_by

    模型中某个可排序的字段的名称，比如 :class:`DateField`、:class:`DateTimeField` 或者 :class:`IntegerField`。它指定了 :class:`Manager` 的 :meth:`~django.db.models.query.QuerySet.latest` 和 :meth:`~django.db.models.query.QuerySet.earliest` 中使用的默认字段。

    例如::

        get_latest_by = "order_date"

    详见 :meth:`~django.db.models.query.QuerySet.latest` 文档。

``managed``
-----------

.. attribute:: Options.managed

    默认为 ``True``，意思是 Django 在 :djadmin:`migrate` 命令中创建合适的数据表，并且会在 :djadmin:`flush` 管理命令中移除它们。换句话说，Django会 *管理* 这些数据表的生命周期。

    如果是 ``False``，Django 就不会为当前模型创建和删除数据表。如果当前模型表示一个已经存在的，通过其它方法建立的数据库视图或者数据表，这会相当有用。这是设置为 ``managed=False`` 时 *唯一* 的不同之处。模型处理的其它任何方面都和平常一样。这包括：

    1. 如果你不声明它的话，会向你的模型中添加一个自增主键。为了避免给后面的代码读者带来混乱，强烈推荐你在使用未被管理的模型时，指定数据表中所有的列。

    2. 如果一个带有 ``managed=False`` 的模型含有指向其他未被管理模型的 :class:`~django.db.models.ManyToManyField` ，那么多对多连接的中介表也不会被创建。但是，一个被管理模型和一个未被管理模型之间的中介表 *将* 被创建。

       如果你需要修改这一默认行为，创建中介表作为显式的模型（设置为 ``managed``），并且使用 :attr:`ManyToManyField.through` 为你的自定义模型创建关联。

    对于带有 ``managed=False`` 的模型的测试，你要确保在测试启动时建立正确的表。

    如果你对修改模型类在 Python 层面的行为感兴趣，你 *可以* 设置 ``managed=False``，并且创建一个已经存在模型的部分。但是这种情况下使用 :ref:`proxy-models` 才是更好的方法。

``order_with_respect_to``
-------------------------

.. attribute:: Options.order_with_respect_to

    按照给定的字段把这个对象标记为“可排序的”。这一属性通常用到 ``ForeignKey``，使它在父对象中有序。比如，如果 ``Answer`` 和 ``Question`` 相关联，一个问题有至少一个答案，并且答案的顺序非常重要，你可以这样做::

        from django.db import models

        class Question(models.Model):
            text = models.TextField()
            # ...

        class Answer(models.Model):
            question = models.ForeignKey(Question, on_delete=models.CASCADE)
            # ...

            class Meta:
                order_with_respect_to = 'question'

    当 ``order_with_respect_to`` 设置之后，模型会提供两个用于设置和获取关联对象顺序的方法：``get_RELATED_order()`` 和 ``set_RELATED_order()``，其中 ``RELATED`` 是小写的模型名称。例如，假设一个 ``Question`` 对象有很多相关联的 ``Answer`` 对象，返回的列表中含有相关联 ``Answer`` 对象的主键::

        >>> question = Question.objects.get(id=1)
        >>> question.get_answer_order()
        [1, 2, 3]

    与 ``Question`` 对象相关联的 ``Answer`` 对象的顺序，可以通过传入一格包含 ``Answer`` 主键的列表来设置::

        >>> question.set_answer_order([3, 1, 2])

    相关联的对象也有两个方法，``get_next_in_order()`` 和 ``get_previous_in_order()``，用于按照合适的顺序访问它们。假设 ``Answer`` 对象按照 ``id`` 来排序::

        >>> answer = Answer.objects.get(id=2)
        >>> answer.get_next_in_order()
        <Answer: 3>
        >>> answer.get_previous_in_order()
        <Answer: 1>

.. admonition:: ``order_with_respect_to`` 隐式设置 ``ordering`` 选项

    在内部，``order_with_respect_to`` 添加一个名为 ``_order`` 的附加字段/数据库列，并将模型的 :attr:`~Options.ordering` 选项设置为此字段。因此，``order_with_respect_to`` 和 ``ordering`` 不能一起使用，并且 ``order_with_respect_to`` 添加的排序将在您获得此模型的对象列表时应用。

.. admonition:: 修改 ``order_with_respect_to``

    因为 ``order_with_respect_to`` 属性会在数据库中添加一个额外的列，所以如果你在首次 :djadmin:`migrate` 之后添加或者修改了 ``order_with_respect_to`` 属性，要确保执行和应用了合适的迁移操作。

``ordering``
------------

.. attribute:: Options.ordering

    对象默认的顺序，获取一个对象的列表时使用::

        ordering = ['-order_date']

    它是一个字符串的列表或元组。每个字符串是一个字段名，前面带有可选的“-”前缀表示倒序。前面没有“-”的字段表示正序。使用“?”来表示随机排序。

    例如，要按照 ``pub_date`` 字段的正序排序，这样写::

        ordering = ['pub_date']

    按照 ``pub_date`` 字段的倒序排序，这样写::

        ordering = ['-pub_date']

    先按照 ``pub_date`` 的倒序排序，再按照 ``author`` 的正序排序，这样写::

        ordering = ['-pub_date', 'author']

    默认排序也会影响 :ref:`aggregation queries
    <aggregation-ordering-interaction>`。

.. warning::

    排序并不是没有任何代价的操作。你向 ordering 属性添加的每个字段都会产生你数据库的开销。你添加的每个外键也会隐式包含它的默认顺序。

    如果查询未指定排序，则以未指定的顺序从数据库返回结果。只有当通过唯一地标识结果中的每个对象的一组字段进行排序时，才保证特定的排序。例如，如果一个 ``name`` 字段不是唯一的，它的排序并不能保证同名的对象总是以相同的顺序出现。

``permissions``
---------------

.. attribute:: Options.permissions

    设置创建对象时权限表中额外的权限。增加、删除和修改权限会自动为每个模型创建。这个例子指定了一种额外的权限，``can_deliver_pizzas``::

        permissions = (("can_deliver_pizzas", "Can deliver pizzas"),)

    它是一个包含二元组的元组或者列表，格式为  ``(permission_code, human_readable_permission_name)``。

``default_permissions``
------------------------------

.. attribute:: Options.default_permissions

    默认为 ``('add', 'change', 'delete')``。你可以自定义这个列表，比如，如果你的应用不需要默认权限中的任何一项，可以把它设置成空列表。在模型被  :djadmin:`migrate` 命令创建之前，这个属性必须被指定，以防一些遗漏的属性被创建。

``proxy``
---------

.. attribute:: Options.proxy

    如果 ``proxy = True``，作为该模型子类的另一个模型会被视为 :ref:`代理模型 <proxy-models>`。

``required_db_features``
------------------------

.. attribute:: Options.required_db_features

    .. versionadded:: 1.9

    当前连接应具有的数据库功能列表，以便在迁移阶段考虑模型。例如，如果将此列表设置为 ``['gis_enabled']``，则模型将仅在启用了 GIS 的数据库上同步。在使用多个数据库后端进行测试时，跳过某些模型也很有用。避免可能会或可能不会创建的模型之间的关联，因为 ORM 不处理此问题。

``required_db_vendor``
----------------------

.. attribute:: Options.required_db_vendor

    .. versionadded:: 1.9

    此模型特定的受支持的数据库供应商的名称。 当前内置的供应商名称是：``sqlite``，``postgresql``，``mysql``，``oracle``。如果此属性不为空并且当前连接的供应商不匹配，则不会同步模型。

``select_on_save``
------------------

.. attribute:: Options.select_on_save

    该选项决定了 Django 是否采用 1.6 之前的  :meth:`django.db.models.Model.save()` 算法。旧的算法使用 ``SELECT`` 来判断是否存在需要更新的行。而新式的算法直接尝试使用 ``UPDATE``。在一些小概率的情况中，一个已存在的行的 ``UPDATE`` 操作并不对 Django 可见。比如 PostgreSQL 的 ``ON UPDATE`` 触发器会返回 ``NULL``。这种情况下，新式的算法会在最后执行 ``INSERT`` 操作，即使这一行已经在数据库中存在。

    通常这个属性不需要设置。默认为 ``False``。

    关于旧式和新式两种算法，请参见 :meth:`django.db.models.Model.save()`。

``unique_together``
-------------------

.. attribute:: Options.unique_together

    用来设置的不重复的字段组合::

        unique_together = (("driver", "restaurant"),)

    它是一个元组的元组，组合起来的时候必须是唯一的。它在 Django 后台中被使用，在数据库层上约束数据（比如，在 ``CREATE TABLE`` 语句中包含 ``UNIQUE`` 语句）。

    为了方便起见，处理单一字段的集合时，unique_together 可以是一维的元组::

        unique_together = ("driver", "restaurant")

    :class:`~django.db.models.ManyToManyField` 不能包含在 unique_together中。（这意味着什么并不清楚！）如果你需要验证 :class:`~django.db.models.ManyToManyField` 关联的唯一性，试着使用信号或者显式的 :attr:`through <ManyToManyField.through>` 模型。

    当 ``unique_together`` 的约束被违反时，模型校验期间会抛出 ``ValidationError`` 异常。

``index_together``
------------------

.. attribute:: Options.index_together

    用来设置带有索引的字段组合::

        index_together = [
            ["pub_date", "deadline"],
        ]

    列表中的字段将会建立索引（例如，会在 ``CREATE INDEX`` 语句中被使用）。

    为了方便起见，处理单一字段的集合时，``index_together`` 可以是一个一维的列表::

        index_together = ["pub_date", "deadline"]

``verbose_name``
----------------

.. attribute:: Options.verbose_name

    对象的一个易于理解的名称，为单数::

        verbose_name = "pizza"

    如果此项没有设置，Django 会把类名拆分开来作为自述名：``CamelCase`` 会变成 ``camel case``。

``verbose_name_plural``
-----------------------

.. attribute:: Options.verbose_name_plural

    该对象复数形式的名称::

        verbose_name_plural = "stories"

    如果此项没有设置，Django 会使用 :attr:`~Options.verbose_name` + ``"s"``。

只读 ``Meta`` 属性
=============================

``label``
---------

.. attribute:: Options.label

    .. versionadded:: 1.9

    代表该对象，返回 ``app_label.object_name``，例如，``'polls.Question'``。

``label_lower``
---------------

.. attribute:: Options.label_lower

    .. versionadded:: 1.9

    代表该模型，返回 ``app_label.model_name``，例如，``'polls.question'``。
