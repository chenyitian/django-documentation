=========================
关联对象参考
=========================

.. currentmodule:: django.db.models.fields.related

.. class:: RelatedManager

    “关联管理器”是在一对多或者多对多的关联上下文中使用的管理器。它存在于下面两种情况：

    * :class:`~django.db.models.ForeignKey` 关系的“另一边”。像这样::

            from django.db import models

            class Reporter(models.Model):
                # ...
                pass

            class Article(models.Model):
                reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)

      在上面的例子中，管理器 ``reporter.article_set`` 拥有下面的方法。

    * :class:`~django.db.models.ManyToManyField` 关系的两边::

            class Topping(models.Model):
                # ...
                pass

            class Pizza(models.Model):
                toppings = models.ManyToManyField(Topping)

      这个例子中，``topping.pizza_set`` 和 ``pizza.toppings`` 都拥有下面的方法。

    .. method:: add(*objs, bulk=True)

        把指定的模型对象添加到关联对象集中。

        例如::

            >>> b = Blog.objects.get(id=1)
            >>> e = Entry.objects.get(id=234)
            >>> b.entry_set.add(e) # Associates Entry e with Blog b.

        在上面的例子中，对于 :class:`~django.db.models.ForeignKey` 关系，:meth:`QuerySet.update() <django.db.models.query.QuerySet.update>` 用来执行更新。这需要对象已经保存。

        你可以使用 ``bulk=False`` 参数代替关联管理器执行更新调用 ``e.save()``。

        然而，在多对多关系中使用 ``add()`` 并不会调用任何 ``save()`` 方法，而是由 :meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` 创建关系。如果你需要在关系被创建时执行一些自定义的逻辑，请监听 :data:`~django.db.models.signals.m2m_changed` 信号。

        .. versionchanged:: 1.9

            The ``bulk`` parameter was added. In older versions, foreign key
            updates were always done using ``save()``. Use ``bulk=False`` if
            you require the old behavior.

    .. method:: create(**kwargs)

        创建一个新的对象，保存对象，并将它添加到关联对象集之中。返回新创建的对象::

            >>> b = Blog.objects.get(id=1)
            >>> e = b.entry_set.create(
            ...     headline='Hello',
            ...     body_text='Hi',
            ...     pub_date=datetime.date(2005, 1, 1)
            ... )

            # No need to call e.save() at this point -- it's already been saved.

        这完全等价于（不过更加简洁于）::

            >>> b = Blog.objects.get(id=1)
            >>> e = Entry(
            ...     blog=b,
            ...     headline='Hello',
            ...     body_text='Hi',
            ...     pub_date=datetime.date(2005, 1, 1)
            ... )
            >>> e.save(force_insert=True)

        要注意我们并不需要指定模型中用于定义关系的关键词参数。在上面的例子中，我们并没有传入 ``blog`` 参数给 ``create()``。Django 会明白新的 ``Entry`` 对象 ``blog`` 应该添加到 ``b`` 中。

    .. method:: remove(*objs)

        从关联对象集中移除执行的模型对象::

            >>> b = Blog.objects.get(id=1)
            >>> e = Entry.objects.get(id=234)
            >>> b.entry_set.remove(e) # Disassociates Entry e from Blog b.

        和 :meth:`add()` 相似，上面的例子中，``e.save()`` 可会执行更新操作。但是，多对多关系上的 ``remove()`` ，会使用 :meth:`QuerySet.delete()<django.db.models.query.QuerySet.delete>` 删除关系，意思是并不会有任何模型调用 ``save()`` 方法：如果你想在一个关系被删除时执行自定义的代码，请监听 :data:`~django.db.models.signals.m2m_changed` 信号。

        对于 :class:`~django.db.models.ForeignKey` 对象，这个方法仅在 ``null=True`` 时存在。如果关联的字段不能设置为 ``None``（``NULL``），则这个对象在添加到另一个关联之前不能移除关联。在上面的例子中，从 ``b.entry_set()`` 移除 ``e`` 等价于让 ``e.blog = None``，由于 ``blog`` 的 :class:`~django.db.models.ForeignKey` 没有设置 ``null=True``，这个操作是无效的。

        对于 :class:`~django.db.models.ForeignKey` 对象，该方法接受一个 ``bulk`` 参数来控制它如果执行操作。如果为 ``True``（默认值），``QuerySet.update()`` 会被使用。而如果 ``bulk=False``，会在每个单独的模型实例上调用 ``save()`` 方法。这会触发 :data:`~django.db.models.signals.pre_save` 和 :data:`~django.db.models.signals.post_save`，它们会消耗一定的性能。

    .. method:: clear()

        从关联对象集中移除一切对象::

            >>> b = Blog.objects.get(id=1)
            >>> b.entry_set.clear()

        注意这样不会删除对象 —— 只会删除他们之间的关联。

        就像 ``remove()`` 方法一样，``clear()`` 只能在 ``null=True`` 的 :class:`~django.db.models.ForeignKey` 上被调用，也可以接受 ``bulk`` 关键词参数。

    .. method:: set(objs, bulk=True, clear=False)

        .. versionadded:: 1.9

        Replace the set of related objects::

            >>> new_list = [obj1, obj2, obj3]
            >>> e.related_set.set(new_list)

        This method accepts a ``clear`` argument to control how to perform the
        operation. If ``False`` (the default), the elements missing from the
        new set are removed using ``remove()`` and only the new ones are added.
        If ``clear=True``, the ``clear()`` method is called instead and the
        whole set is added at once.

        The ``bulk`` argument is passed on to :meth:`add`.

        Note that since ``set()`` is a compound operation, it is subject to
        race conditions. For instance, new objects may be added to the database
        in between the call to ``clear()`` and the call to ``add()``.

    .. note::

       注意对于所有类型的关联字段，``add()``、``create()``、``remove()``、``clear()`` 和 ``set()`` 都会马上更新数据库。换句话说，在关联的任何一端，都不需要再调用 ``save()`` 方法。

       同样，如果你再多对多关系中使用了 :ref:`中间模型 <intermediary-manytomany>`，那么 ``add()``、``create()``、``remove()`` 和 ``set()`` 这些关联管理的方法会被禁用。

直接赋值
=================

通过赋值一个新的可迭代的对象，关联对象集可以被整体替换掉::

    >>> new_list = [obj1, obj2, obj3]
    >>> e.related_set = new_list

如果外键关系满足 ``null=True``，关联管理器会在添加 ``new_list`` 中的内容之前，先解除关联集中一切已存在对象的关联。否则，``new_list`` 中的对象会在已存在的关联的基础上被添加。

.. versionchanged:: 1.9

    In earlier versions, direct assignment used to perform ``clear()`` followed
    by ``add()``. It now performs a ``set()`` with the keyword argument
    ``clear=False``.

.. deprecated:: 1.10

    Direct assignment is deprecated in favor of the
    :meth:`~django.db.models.fields.related.RelatedManager.set` method::

        >>> e.related_set.set([obj1, obj2, obj3])

    This prevents confusion about an assignment resulting in an implicit save.
