==============
内建的视图
==============

.. module:: django.views
   :synopsis: Django 内建的视图

有几个 Django 的内建视图在编写在
:doc:`/topics/http/views` 中，文档的其它地方也会有所讲述。

开发环境中的文件服务器
================================

.. function:: static.serve(request, path, document_root, show_indexes=False)

在本地的开发环境中，除了你的项目中的静态文件，可能还有一些文件，出于方便，你希望让Django 来作为服务器。:func:`~django.views.static.serve` 视图可以用来作为任意目录的服务器。（该视图 *不能* 用于生产环境，应该只用于开发时辅助使用；在生产环境中你应该使用一个真实的前端 Web 服务器来服务这些文件）。

最常见的例子是用户上传文档到 :setting:`MEDIA_ROOT` 中。``django.contrib.staticfiles`` 用于静态文件且没有对用户上传的文件做处理，但是你可以通过在 URLconf 中添加一些内容来让Django 作为 :setting:`MEDIA_ROOT` 的服务器::

    from django.conf import settings
    from django.views.static import serve

    # ... the rest of your URLconf goes here ...

    if settings.DEBUG:
        urlpatterns += [
            url(r'^media/(?P<path>.*)$', serve, {
                'document_root': settings.MEDIA_ROOT,
            }),
        ]

注意，这里的代码片段假设你的 :setting:`MEDIA_URL` 的值为 ``'/media/'``。它将调用 :func:`~django.views.static.serve` 视图，传递来自 URLconf 的路径和（必选的）``document_root`` 参数。

因为定义这个 URL 模式显得有些笨拙，Django 提供一个小巧的 URL 辅助函数 :func:`~django.conf.urls.static.static`，它接收 :setting:`MEDIA_URL` 这样的参数作为前缀和视图的路径如 ``'django.views.static.serve'``。其它任何函数参数都将透明地传递给视图。

.. _error-views:

错误视图
===========

Django 原生自带几个默认视图用于处理 HTTP 错误。若要使用你自定义的视图覆盖它们，请参见 :ref:`customizing-error-views`。

.. _http_not_found_view:

404（Page Not Found）视图
-----------------------------

.. function:: defaults.page_not_found(request, exception, template_name='404.html')

当你在一个视图中引发 :exc:`~django.http.Http404` 时，Django 将加载一个专门的视图用于处理 404 错误。默认为 :func:`django.views.defaults.page_not_found` 视图，它产生一个非常简单的“Not Found”消息或者渲染 ``404.html`` 模板，如果你在根模板目录下创建了它的话。

默认的 404 视图将传递一个变量给模板：``request_path``，它是导致错误的 URL。并 ``exception``，这是触发视图的异常的有用描述（例如，传递任何消息给一个特定的 ``Http404`` 实例）。

关于 404 视图需要注意的三点：

* 如果 Django 在检测 URLconf 中的每个正则表达式后没有找到匹配的内容也将调用 404 视图。

* 404 视图会被传递一个 :class:`~django.template.RequestContext` 并且可以访问模板上下文处理器提供的变量（例如 ``MEDIA_URL``）。

* 如果 :setting:`DEBUG` 设置为 ``True`` （在你的设置模块中），那么将永远不会调用 404 视图，而是显示你的 URLconf 并带有一些调试信息。

.. versionchanged:: 1.9

    ``page_not_found()`` 修改了参数，该函数现在接受第二个参数，触发错误的异常，一个异常的描述也将传递到模板上下文。

.. versionchanged:: 1.10

    传递一个不存在的 ``template_name`` 将会抛出 ``TemplateDoesNotExist``。

.. _http_internal_server_error_view:

500（Server Error）视图
---------------------------

.. function:: defaults.server_error(request, template_name='500.html')

类似地，在视图代码中出现运行时错误，Django 将执行特殊情况下的行为。如果一个视图导致异常，Django 默认情况下将调用 ``django.views.defaults.server_error``视图，它产生一个非常简单的“Server Error”消息或者渲染 ``500.html``，如果你在你的根模板目录下定义了它的话。

默认的 500 视图不会传递变量给 ``500.html`` 模板，并使用一个空 ``Context`` 来渲染以减少再次出现错误的可能性。

如果 :setting:`DEBUG` 设置为 ``True`` （在你的设置模块中），那么将永远不会调用 500 视图，而是显示回溯并带有一些调试信息。

.. versionchanged:: 1.10

    传递一个不存在的 ``template_name`` 将会抛出 ``TemplateDoesNotExist``。

.. _http_forbidden_view:

403（HTTP Forbidden）视图
-----------------------------

.. function:: defaults.permission_denied(request, exception, template_name='403.html')

与 404 和 500 视图一样，Django 具有一个处理 403 Forbidden 错误的视图。如果一个视图导致一个 403 视图，那么 Django 将默认调用 ``django.views.defaults.permission_denied`` 视图。

该视图加载并渲染你的根模板目录下的 ``403.html``，如果这个文件不存在则根据 :rfc:`7231#section-6.5.3`（HTTP 1.1 规范）返回“403 Forbidden”文本。
模版上下文包含 ``exception``，这是触发视图的异常的 Unicode 描述。

``django.views.defaults.permission_denied`` 通过 :exc:`~django.core.exceptions.PermissionDenied` 异常触发。若要拒绝访问一个视图，你可以这样视图代码::

    from django.core.exceptions import PermissionDenied

    def edit(request, pk):
        if not request.user.is_staff:
            raise PermissionDenied
        # ...

.. versionchanged:: 1.9

    ``permission_denied()`` 在 Django 1.9 修改了参数。该函数现在接受第二个参数，触发错误的异常，异常的 Unicode 描述也将传递到模板上下文。

.. versionchanged:: 1.10

    传递一个不存在的 ``template_name`` 将会抛出 ``TemplateDoesNotExist``。

.. _http_bad_request_view:

400（bad request）视图
--------------------------

.. function:: defaults.bad_request(request, exception, template_name='400.html')

当 Django 中引发一个 :exc:`~django.core.exceptions.SuspiciousOperation`  时，它可能通过 Django 的一个组件处理（例如重设会话的数据）。如果没有特殊处理，Django 将认为当前的请求时一个‘bad request’而不是一个服务器错误。

``django.views.defaults.bad_request`` 和 ``server_error`` 视图非常相似，除了返回 400 状态码来表示错误来自客户端的操作。默认情况下，与触发视图的异常相关的任何内容都不会传递给模板上下文，因为异常消息可能包含敏感信息，如文件系统路径。

``bad_request`` 视图同样只是在 :setting:`DEBUG` 为 ``False`` 时使用。

.. versionchanged:: 1.9

    ``bad_request()`` 在 Django 1.9 修改了参数。该函数现在接受第二个参数，触发错误的异常。

.. versionchanged:: 1.10

    传递一个不存在的 ``template_name`` 将会抛出 ``TemplateDoesNotExist``。
