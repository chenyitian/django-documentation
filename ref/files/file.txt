===================
``File`` 对象
===================

:mod:`django.core.files` 模块及其子模块包含了一些用于基本文件处理的内建类。

.. currentmodule:: django.core.files

``File`` 类
==================

.. class:: File(file_object)

    :class:`File` 类是 Python :py:term:`file object` 的一个简单封装，并带有 Django 特定的附加功能。需要表示文件的时候，Django 内部会使用这个类。

    :class:`File` 对象拥有下列属性和方法：

    .. attribute:: name

        含有 :setting:`MEDIA_ROOT` 相对路径的文件名称。

    .. attribute:: size

        文件的字节数。

    .. attribute:: file

        这个类所封装的，原生的 :py:term:`file object`。

        .. admonition:: 在子类中要小心该属性。

            一些 :class:`File` 的子类，包括 :class:`~django.core.files.base.ContentFile` 和
            :class:`~django.db.models.fields.files.FieldFile`，可能会用一个 Python :py:term:`file object` 以外的对象替换该属性。在这些情况下，这个属性本身可以是一个 :class:`File` 子类（而不一定是同一个子类）。只要有可能，使用子类本身的属性和方法，而不是子类的 ``file`` 属性的属性和方法。

    .. attribute:: mode

        文件的读写模式。

    .. method:: open(mode=None)

        打开或者重新打开文件（同时会执行 ``File.seek(0)``）。``mode`` 参数的值和 Python 内建的 :func:`python:open()` 相同。

        重新打开一个文件时，无论文件原先以什么模式打开，``mode`` 都会覆盖；``None`` 的意思是以原先的模式重新打开。

    .. method:: read(num_bytes=None)

        读取文件内容。可选的 ``size`` 参数是要读的字节数；没有指定的话，文件会一直读到结尾。

    .. method:: __iter__()

        迭代整个文件，并且每次生成一行。

    .. method:: chunks(chunk_size=None)

        迭代整个文件，并生成指定大小的一部分内容。``chunk_size`` 默认为 64 KB。

        处理大文件时这会非常有用，因为这样可以把他们从磁盘中读取出来，而避免将整个文件存到内存中。

    .. method:: multiple_chunks(chunk_size=None)

        如果文件足够大，需要按照提供的 ``chunk_size`` 切分成几个部分来访问到所有内容，则返回 ``True``。

    .. method:: write(content)

        将指定的内容字符串写到文件。取决于底层的储存系统，写入的内容在调用 :func:`close()` 之前可能不会完全提交。

    .. method:: close()

        关闭文件。

    除了这些列出的方法，:class:`~django.core.files.File` 暴露了 ``file`` 对象的以下属性和方法：``encoding``，``fileno``，``flush``，``isatty``，``newlines``，``read``，``readinto``，``readlines``，``seek``，``softspace``，``tell``，``truncate``，``writelines``，``xreadlines``。如果你使用 Python 3，``seekable`` 方法也将可用。

    .. versionchanged:: 1.9

        添加了 ``seekable`` 方法。

.. currentmodule:: django.core.files.base

``ContentFile`` 类
=========================

.. class:: ContentFile(File)

    ``ContentFile`` 类继承自 :class:`~django.core.files.File`，但是并不像 :class:`~django.core.files.File` 那样，它操作字符串的内容（也支持字节集），而不是一个实际的文件。例如::

        from __future__ import unicode_literals
        from django.core.files.base import ContentFile

        f1 = ContentFile("esta sentencia está en español")
        f2 = ContentFile(b"these are bytes")

.. currentmodule:: django.core.files.images

``ImageFile`` 类
=======================

.. class:: ImageFile(file_object)

    Django 特地为图像提供了这个内建类。:class:`django.core.files.images.ImageFile` 继承了 :class:`~django.core.files.File` 的所有属性和方法，并且额外提供了以下的属性：

    .. attribute:: width

        图像的像素单位宽度。

    .. attribute:: height

        图像的像素单位高度。

.. currentmodule:: django.core.files

附加到对象的文件的额外方法
===============================================

任何关联到一个对象（比如下面的 ``Car.photo`` ）的 :class:`File` 都会有一些额外的方法：

.. method:: File.save(name, content, save=True)

    以提供的文件名和内容保存一个新文件。这样不会替换已存在的文件，但是会创建新的文件，并且更新对象来指向它。如果 ``save`` 为 ``True``，模型的 ``save()`` 方法会在文件保存之后调用。这就是说，下面两行::

        >>> car.photo.save('myphoto.jpg', content, save=False)
        >>> car.save()

    等价于::

        >>> car.photo.save('myphoto.jpg', content, save=True)

    要注意 ``content`` 参数必须是 :class:`File` 或者 :class:`File` 的子类的实例，比如 :class:`~django.core.files.base.ContentFile`。

.. method:: File.delete(save=True)

    从模型实例中移除文件，并且删除内部的文件。如果 ``save`` 是 ``True``，模型的 ``save()`` 方法会在文件删除之后调用。
